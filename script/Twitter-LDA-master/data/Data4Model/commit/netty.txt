change package name add class path project target san ignore
move factory methods internal logger internally refractory make internal logger interface
java doc log package
relate issue netty performance degradation channel write call outside thread transport bottleneck frequent makeups find recent implementations require makeups get set interest ops
fix slow write performance circumstance
resolve issue netty simplify exception stack add debug til stacker simplifier defaultexceptionevent internally refractory simplify stack trace unless netty debug mode enable
test fix bug relate bulk byte transfer
fix issue netty channel buffer equal fail compare buffer different india ness make sure swap order two buffer different order
fix issue netty compositechannelbuffer copy respect byte test case
fix bug compositechannelbuffer order return wrong order fix bug channel buffer wrap buffer generate non empty buffer buffer actually empty
improve socket echo integration test check state strictly fix issue netty channel future return channel close notify handler
fix issue netty delimiterbasedframedecoder choose wrong delimiter one delimiter specify bunch integration test test coverage
package rename forget add code
tiny micro optimization test data generation
decrease number wake call even constraint level greater
coworker optimization use read write lock split write two versions fair unfair
fix issue netty channel bind event fire client socket fix coworker register check flag
fix throughput issue message write different thread worker thread
introduce intermediary write buffer reduce contention
improve throughput server side accept operation add fast queue empty
fix another race condition occur write read flag set clear time
fix bug netty chan future return handler handshake complete associate channel close
fix problem exceptions log immediately abstractsocketsslechotest
make sure exceptions print try
merge help branch trunk
initial implementation high low water mark base write overflow prevention mechanism
elegant shutdown discard client
resolve issue netty global channel registry initial implementation
make sure box encoders decoders respect channelbufferfactory configuration
deprecate receive size predictor
fix infinite loop nioclientsocketpipelinesink register selector fail open
implement new example local time
implement local time client server example may
rename
need volatile simplify overall code
add git ignore
add alternative implementations concurrent map replace exist reference add reusable iterator avoid iterator creation overhead optimize hashedwheeltimer
add simplechannelupstreamhandler simplechanneldownstreamhandler
optimize event implementation reduce memory footprint improve performance somewhat
merge andy local transport merge andy help tunnel need tidy seem work
improve local transport behave closely real transport change channel factory instantiate
rename hot tunnel
add tunnel address
httptunnelclientsocket httptunnelingclientsocket httptunnelsocket httptunnelingsocket
forget commit
extract common code various channel confirm implementations defaultchannelconfig defaultserverchannelconfig
relate issue netty transport preliminary initial implementation transport
fix problem transport work server side
implement abstract channel handle writable properly need cleanup optimization though
fix couple find bug warn
fix find bug warn
fix netty chunk encode emulation large non chunk help request replace merge chunk option matchup size matchup size greater content chunk larger matchup size receive split multiple chunk chunk request receive add unfold option frame decoder replay decoder
implement old block base transport support multi cast add quote moment example show use transport
add cookie decode support
rename type int set rename
fix problem expire cookie attribute misinterpret cookie encoder use cookie get version determine cookie version instead constructor parameter
handle client side cookie much better
port high low watermark
fix issue netty replay decoder call decode last unplayable buffer decode last provide repayable instead cumulative rename firemessagereceived unfoldandfiremessagereceived avoid confusion
diagnosis message abstractsocketsslechotest
convert socket exception socket close closedchannelexception oil suck
time tolerance cookiedecodertest
add connection bootstrap transport
add connection bootstrap connect
make sure interest ops update oil thread interrupt
make sure interest ops update oil thread interrupt
potential fix air close freeze issue
merge daniel transport trunk need review cleanup look general
add java docs remove use code excessive comment
merge recent change trunk transport miscellaneous modifications like typo fix
fix notyetconnectedexception set interest back port fix apply coworker
fix incorrect miss event order bootstrap transport
rename worker niigata framework
make sure composite buffer consolidation happen convert compositechannelbuffer ordinary buffer
reorganize help examples add file server example later fix configuration errors help tunnel transport example
eliminate unnecessary use thread pool help tunnel transport
fix bug cause today refactoring
revamp help tunnel transport one help request response correspond one socket connection reconnection help server disconnect connection close request response prematurely add relate documentation update example
upgrade dependencies generate photo class
polish examples
fix issue netty connection timeout work socket transport implement connection timeout nioclientsocketchannel
license apache license
revert back optimization apply remove unnecessary break statement coworker write
fork lib support zip format add compression exception hide stream exception better java doc compression level better compression level validation
lib code cleanup
better method name add httpcontentencoder httpcontentcompressor need java doc update
relate issue netty add support help trail headers add defaulthttpchunktrailer move header validation logic httpcodecutil
resolve issue netty add support help trail headers modify httpmessagedecoder generate httpchunktrailer trail headers trail headers merge hot message anymore correctness
resolve issue netty race condition recommend server shutdown procedure fix bug socket transport implementations new connection accept channel future servers rechannel close complete introduce lock ensure boss thread terminate notify future
resolve issue netty static channel pipeline implementation add staticchannelpipeline change bootstrap implementations work staticchannelpipeline change server bootstrap abstractcodecembedder leverage staticchannelpipeline stacker simplifier recognize staticchannelpipeline
back port change linkedtransferqueue upstream
resolve issue netty add channel buffer copy buffer accept char char buffer char sequence rewrite string copy buffer implementation remove unnecessary methods charge total
improve default message string easier debug
resolve issue netty reduce memory copy heap buffer direct buffer transport replace internal direct buffer pool custom pool optimize netty add channel buffer direct clean coworker write niodatagramworker write
overhaul socket write write operation make caller thread opportunistically directbufferpool become thread safe due change modification still require performance analysis test
overhaul data ram write write operation make caller thread opportunistically qom example use data ram transport modification still require performance analysis test
disable chunk encode tsp add tsp encoders
revert back opportunistic write optimization due instability
improve write performance reduce lame write attempt channel whose send buffer full already
implement send buffer pool rename rebuff pool socketreceivebufferpool
change type int long add back file region since map buffer outperform transfer refactored socketsendbufferpool support file region
resolve issue netty fine grain control thread rename redefine thread determiner improve cache abstract channel string improve overall oil thread name thread number large number look good though fix later
add parent threadnamingrunnable
netty support file upload netty help server merge frederic hot post patch still need design name review documentation
netty add implementation netty trunk release order get test pass change surefire fork policy never seem class loader settings use maven process prevent mock mock package private interfaces
fix java doc error
move help tunnel implementation package replace original implementation exist usage example delete replace update example use new apr
add scop package dir initial class copy top
fix scop package compilation errors
add initial version scop transport
fix ape non chunk large variable create
update version netty stream channel
add toolongframeexception recovery test delimiterbasedframedecoder
add failimmediatelyontoolongframeoption
socket hybrid support
add scop echo example refactored scop channel imply class
add scop echo example refactored scop channel imply class
merge remote branch upstream master
refactored scop server channel fig remove unsupported scop socket options
merge remote branch upstream master
release cumulation buffer fire upstream end leak big channel buffer patch extract pull request thank area patch
add miss annotations
merge pull request add failimmediatelyontoolongframe option delimiterbasedframedecoder lengthfieldbasedframedecoder
socket server sol example app
refactored scop server channel fig class add scop server channel buffer size update scop examples
remove unnecessary return statement
minor refactoring
test scop ism fix ape scop notification event constructor add maven exec plugin
change visibility cox event channel event runnable execution handler implementers stream execution handler sea
merge branch
use channel instead context cleanup unused method argument
use socket wire protocol version rather specification version
merge pull request use socket wire protocol version rather specification version
fix memory leak set options fail accept new connection
issue make project multi module split project follow modules common buffer code code help transport transport handler example test suite integration test involve modules nothing yet make generate commit also fix compilation errors transport scop non linux systems least compile without complaints
apply check style build please note build fail moment due various check style violations fix soon
overall cleanup add lose old lib headers
overall code cleanup fix base check style fee back simplify socket client example need work rename autobahn test server class
rename help snoop example class disambiguation
rename help upload example class disambiguation
clean new socket package
fix possible ape throw buffer set null exception throw see
merge spy support branch see
clean scop notification handler
implement fragment scop frame decoder implement scop netty test suite
fix httpsnoopclient see
correctly decode fri querystringdecoder see
add separate bind method client bootstrap support multi home scop
set selector select timeout value equal top transport remove unsupported scop socket options sctpchannelconfig class add test case scop multi home multi stream
check log level enable log see
start refactor oil transport share code see
start refactor transport share code see
fix check style warn
merge upstream master
remove cast see
scop association shutdown cleanup
fix compilation issue due bug inference fail type variable return constraint see
merge branch
make possible schedule upstream events get fire later thread first part
optimize handle free ventilate current thread worker thread see
rename method better reflect usage update java docs see
oil transport make sure upstream event get execute thread see
add ordereddownstreamthreadpoolexecutor use use new feature execution handler also handle downstream events mainly useful sea like stuff see
fix name class thank trust review
allow submit runnable get execute thread also use workout flaw thread model see
spy use instead lib
fix write bytes count scop send buffer pool
merge remote branch upstream master
allow share workers use worker pool
spy use header block compressor
make sure compressor end call even exception see
merge red code master branch see
make sure notify future handlers case see
first round remove boss thread see
merge pull request return connection keep alive header help response
make sure use worker client lifetime see
code cleanup
refactor scop share code
fix race
fix race
make sure resources dispose try shutdown executor
use unit assume ignore scop test non unix operation systems
use unit assume ignore scop test non unix operation systems
abstract coworker selectoreventloop
make sure channel connect event fire connect failure see
make sure channel connect event fire connect failure see
issue implement web socket close frame status code reason text
add test case show issue due incorrect usage
take care release local channel releaseexternalresources call see
fix bug lead use two thread task time even worker pool contain see
fix bug lead use two thread task time even worker pool contain see
add test httpclientcodec test handle miss responses see
add port origin help header port non default see
add port origin help header port non default see
make cumulation usage memory efficient see
worker fail fire channel connect event oioacceptedsocketchannel fix also fix race could lead miss events see
need keep old constructor break apr
second round new channel handler apr design rename channel reader channelinboundhandler rename channel writer channeloutboundhandler introduce channel freeholder instead add common super type message buffer byte buffer type safe natural remove notification methods buffer closure might add back later revisit half close connection support
add seepage optimize class enable faster seek bytes value httppostrequestdecoder
optimize buffer access decode back end array possible divide almost time spend decode
fix compilation errors channel group relate type also remove operations valid anymore
need set exception message event see
make even loop scheduledexecutorservice singlethreadeventloop implement scheduledexecutorservice schedule task automatically fetch task queue poll ask take ask remove map backset java provide
fix bug sub protocol send client
fix bug sub protocol send client
make sure compositechannebuffer throw unsupportedoperationexception discard bytes discard whole content buffer see
make sure compositechannebuffer throw unsupportedoperationexception discard bytes discard whole content buffer see
retrofit code framework new apr progress replace frame decoder onto one encoder decoder stream message string message encoder decoder move class code fix bug find run unit test
finish port code package new apr remove deprecate class change type parameter streamtomessagedecoder messagetomessagedecoder flexibility make test code package pass
make sure handler also work sslbufferpool use non heap byte buffer see
add support object estimator
add unsupportedmessagetypeexception replace illegalargumentexceptions unsupportedmessagetypeexception message message encoder decoder continue poll inbound buffer encode decode return null aggregate code
fix version master branch refer issue propose one validate
add message indexoutofboundsexceptions need implement help finish future pull request far plague exceptions information available
spy fix mozilla firefox bug
spy add support
add channelinboundmessagehandleradapter
port code help new apr add channel freeholders catchall buffer relax unsupportedmessagetypeexception constructor signature embed channel use catchall buffer chanelinboundmessagehandleradapter message receive throw exception add channelinboundstreamhandleradapter
fix add check empty buffer also add unit test scenario
split abstract channel abstract channel abstract channel simpler oil transport suit better transport air rate stream add channel freeholders discard buffer
split abstract channel subtypes abstractoiomessagechannel abstractoiostreamchannel replace polymorphism better performance
reorder methods move buffer expansion logic oil
add cod support stack cod
add port origin port non default contribute
add port origin port non default
forward port boss marshal code
forward port spy code
finish forward port spy code
convenient inbound stream handler smarter inbound buffer cleanup add new convenience method channelinboundstreamhandleradapter echoserverhandler use new method defaultchannelpipeline call inbound buffer discard bytes sure memory copy involve
strict thread model allow assign executor handler add even executor make even loop extend add singlethreadeventexecutor multithreadeventexecutor add even executor default implementation fix apr design problem way get non bypass buffer desire type
fix fix work fix
add socket contest simplify lot socket test socket combination generate possible test combinations socket transport socket contest iterate combinations run test use reflection
fix socketstringechotest
better name port socket object echo test
add abstractdatagramtest port uni cast test ignore socket close
fix datagrammulticasttest failure also unwrap invocationtargetexception
move spy echo test test suite use abstract wettest move min version max version spa constants allow public access remove test necessary anymore
ensure local channel fire channel active peer channel register also make test case robust add simple concurrent buffer modification test need work
exchange message two handlers thread safe byte buffer yet
fix race handlers different thread access buffer defaultchannelpipeline detect case create object call bridge work man middle deal race condition slight performance drop observe still faster could find much profile yet
fix ape test
let defaultchannelpipeline call life cycle methods channel handler respect new thread model
need custom runnable implementation use get thank review
wrap exceptions possible
make sure deadlock even channel pipeline modification execute even executor
throw throw able accuse execution modification even executor
improve help message stream decoder master submit fix
port sol echo test remove brit space
overhaul split channel handler merge channelhandlercontext extract handler methods channelinboundhandler channel handler extract handler methods channeloutboundhandler channeloperationhandler move exception catch serve trigger channel handler channel inbound outbound handle context merge channelhandlercontext channelhandlercontext add direct access methods inbound outbound buffer use channel freeholder minimal inbound byte buffer inbound buffer simpler better performance bypass buffer type remove work thread model handlers use bypass buffer break fix soon combinedhandleradapter make sense anymore either four handler interfaces consider often two handlers implement handler interface channel handler think better ways provide feature
rewrite handler reduce chance oil oil dead lock handler always begin handshake unless start true remove issue handshake property user want start handshake later add handler later remove enable renegotiation property upgrade fix security vulnerability need complicate code property name change getsslengineinboundclosefuture sslclosefuture update secure chat example add timeout handshake close notify better security however currently hard cod make property later
fit every line columns
channel type channelbuffertype optimize defaultchannelpipeline channel type buffer type use simpler bite mask operation pipeline traversal
replace stream byte compute stream mean byte stream message stream confuse also already mix stream byte place better use term consistently inbound buffer inbound stream
ensure user implement flush inboundbufferupdated also prohibit user override channel inbound byte message handle adapter user want extend channelinboundhandleradapter instead
rename channel buffer byte discuss channel buffer give perception buffer channel channel buffer byte buffer message buffer therefore let confuse
remove channel freeholder add handler interfaces type safety channelinboundhandler channeloutboundhandler type parameter anymore user implement channelinboundmessagehandler channeloutboundmessagehandler
fix bug chunkedwritehandler stall encoders pipeline swallow flush request allocate new buffer unnecessarily chunk file
add byte order byte order method simplify little indian access remove methods require byte order parameter pool formerly instead user call order byte order get little indian version user buffer give less overwhelm number methods pool
build one jar non full build
next round sync channel apr support see see
rename class sync air see
fix write see
forward port lib encoder patch rename define new class add dkl encoder lib lib extend add zlibcodecfactory use everywhere
add channel metadata remove unnecessary disconnect imply add channel metadata remove channel buffer type default pipeline automatically redirect disconnect request close channel disconnect operation remove unnecessary disconnect implementations
add composite debug components
make cookie encoder cookie decoder stateless also cookie encoder split servercookieencoder clientcookieencoder
fix bite java doc break fail merge
remove leave overs see
minimize byte copy use composite debug cat chunk see
port fix
correctly format cookies fix bug lead expire cookies work see
use instead custom comparator
remove unused class
make byte dynamic introduce interface composite buffer replace bytebufferbackedbytebuf directly make directly happy debug dynamic remove dynamic debug replace pool dynamic buffer pool buffer direct buffer remove bytes factory replace bytes pool later add might change future
add trace level internal logger
replace free reference count fix slice debug unsafe base fee back add pool composite buffer int
socket enhancements refactoring add suggestions norman visual
merge pull request add trace level internal logger
merge branch
add byte unsafe discardsomereadbytes reduce discard bytes
fix infinite loop defaultcompositebytebuf set bytes
initial port scop basic class interfaces netty
allow fig read write timeout air transport see
ensure unmodified buffer deliver via pipeline read complete next read begin
handler flush notify futures prematurely make use channelflushfuturenotifier notify flush futures correctly improve test case ensure commit fix bug
suppress unchecked cast warn fig options
make nosuchbufferexception give useful message remove confuse exception message use default exception message wherever possible
merge pull request prevent store composite buffer
add support close either input output part channel add true channelinputshutdownevent fire via serve trigger remote peer shut output connection close user call close explicitly false connection close immediately add socket channel use shutdown add improve test case relate half close sockets
scop channel class port netty
add basic unit test write port noise netty
add scop oil transport scop implementation change interrupt handle sieve loop example
merge remote track branch upstream master
fix indexoutofboundexception use compositechannelbuffer reader index last position empty array pass read see
provide better way handle decoder failures update string hot object implementations httpmessagedecoder raise exception set decoder result property decode message httpmessagedecoder discard inbound traffic decode fail add new state call bad message add test case test behavior
duplicate plugin versions
add scop code
forward port scop echo test case
issue provide distribution stats hashedwheeltimer first cut implement generic abstraction layer plug able metrics providers first cut closely model hammer metrics remain see indeed flexible enough support providers provide default implementation new abstraction layer base hammer metrics support plug able monitor providers use java service loader use new abstraction layer provide stats number timeouts execute per second distribution absolute deviation schedule actual timeout execution time hashedwheeltimer interface valuedistributionmonitor monitor histograms interface eventuate monitor monitor measure rate per time unit specific events interface value monitor monitor track arbitrary datum current value interface counter monitor monitor incrementing decrementing long value interface monitor registry registry monitor serve interface netty concrete metrics providers hammer metrics interface monitorregistryfactory implement metrics providers document use netty new monitor support java docs package
add back support file region see
port help multiparty package see
fix indexoutofboundsexception could acc buffer consolidate middle operation
basic support sock code
fix utility class miss final modifiers etc
remove redundant arg constructors
use maven plugin plugin generate ski manifest
correctly handle urls empty abs path issue socket handshake
clean maven bundle plugin warn
allow replace inbound outbound buffer handler
make sure handshake channel future notify right encoder present channel pipeline
potential null interception without check initial status
bytes allocator apr byte per improvements commit introduce new apr byte allocation fix issue along refactoring byte simplicity better performance see user configure bytes allocator channel via default allocator currently allocate buffer use pool anymore follow cox allow buffer allocator choose buffer type cox allow heap buffer cox allow direct buffer reallocate buffer use unsafe free operation unsafely free follow list relevant change add channelinboundhandler freeinboundbuffer channeloutboundhandler freeoutboundbuffer let user free buffer allocate channel handler adapter class implement already users need call free methods invoke channel close register byte contract must implement unsafely access unsafe operation unsafely internal buffer replace wrap debug unsafely simplify overall class hierarchy avoid unnecessary instantiation unsafe instance unsafe operation remove buffer reference count confuse instantiate swap debug lazily avoid instantiation cost rename channelfuturefactory channelpropertyaccess move common methods channel channelhandlercontext also make package private hide user remove unused unsafe operations new buffer add detection til canfreedirectbuffer allocator decide buffer type use safely
make tail point last channel handler context add several case defaultchannelpipeline
replace usage implementation
fix exception handle call exception catch method current handler default handler call happen
fix disc channel event loop issue use different selectors
add metrics mention use single static initialization available metrics monitor registries change original implementation work similar way self select load implementation use single static instance initialization throw illegals exception multiple implementations find class path instead select use first implementation return iterator class leave miserable keep apr add hammer metrics examples allow publish metrics publish number thread use events group see issue seem like better place put set default thread count multithreadeventloopgroup use super also happen common parent class amongst multithreadedeventloopgroup implementations count report local fix cosmetic issue point pull request update see count channel register single thread event loop measure many time return select time
fix flint unchecked warn
fix sock auth sub negotiation version handle
remove unnecessary empty line
replace unsafely byte unsafe unsafely add byte unsafe back avoid extra instantiation byte implementations implement interface hide implementation detail byte implementations package private abstractly swap debug public implement need unwrap unsafe operation anymore channel also unsafe unsafe extend channel unsafe channel unsafe provide free operation user need cast buffer
add pooledbytebufallocator micro benchmark module pull request introduce new default bytes allocator implementation base email differences minimum possible buffer capacity email use binary heap random branch email red black tree thread local cache yet email thread local cache default page size kit email kit default chunk size min email min allocate buffer bigger chunk size email possible control memory layout java user work around issue create composite buffer always feasible option although min pretty big default user handler might need deal bound buffer user want deal large message also ensure new allocator perform good enough write micro benchmark make dedicate maven module use google caliper framework run publish test result example miscellaneous change make byte implementations public implement new allocator make use add bytes allocator composite buffer variants bytes allocator buffer create buffer capacity
fix possible ape acc inbound outbound buffer lazy allocate yet
fix scop test case
java doc fix remove necessary cast check
read request read demand pull request introduce new operation call read replace exist inbound traffic control method even loop perform socket read read operation issue request read operation actually perform even loop trigger inboundbuffersuspended event tell handlers request read operation perform inbound traffic suspend handler decide continue read unlike outbound operations read use channel future avoid cost good reason create new future per read cost change pull request consequently remove readable property channelhandlercontext mean traffic control work change significantly pull request also add new configuration property whose default value true true netty call cox read need close control read call set false another interest fact non terminal handlers really need call read last inbound handler call enough actually even need call last handler case mention serious backward compatibility issue compiler complain handler implement read method add follow public void read channelhandlercontext cox throw exception cox read note pull request certainly make bound inbound buffer support easy add bound inbound buffer support
split channel future channel future channel promise
generate tarball top level directory
move utility method abstract base class correctly handle expand buffer also oil
fix bug handler respect start flag fix add dedicate test case socketstarttlstest
add unify interface message orient protocols also use direct buffer
auto start read operation
add partially exception allow notify user flush write partial successful
give handler control buffer read bytes discard pull request add two new handler methods discardinboundreadbytes cox discardoutboundreadbytes cox channelinboundbytehandler channeloutboundbytehandler respectively call every inboundbufferupdated flush respectively default implementation call discardsomereadbytes buffer user override behavior easily example replay decoder discardinboundreadbytes look like follow public void discardinboundreadbytes channelhandlercontext cox throw exception byte cox inbound buffer final int dread index reader index super discardinboundreadbytes cox final int newsreader index reader index checkpoint dread index newsreader index handler buffer index variable extend replay decoder bytetomessagedecoder handler also override discardinboundreadbytes adjust index variable accordingly
call free able free free able message reach end channel pipeline guard resource leakage
remove usage generics output encoder decoder make flexible
simplify defaultchannelpipeline
add rate transport
use inetsocketaddress wherever possible tighten return type channel parent
access cleaner really present prevent errors android
make use bytes folder spy help multiparty sockets allow buffer pool
implement multi home operations sctpserverchannels scop java docs cleanup
overhaul help code commit try simplify handle help easier consistent effect many change include hot message rename hot header set content get content methods remove hot chunk rename hot content httpchunktrailer rename last content httpcodecutil merge hot headers complete help message request response contain follow part hot header httprequestheader httpresponseheader hot content object contain part content message last content mark end message contain remain data content also change semantic hot response hot request represent complete message contain hot header attila content use easily send request httpmessageaggregator rename httpobjectaggregator produce hot response hot request message
second help overhaul rename message type clarity hot message full message hot header hot message hot request full request hot response fullest response httprequestheader hot request httpresponseheader hot response hot content extend bytes folder content method make hot headers abstract make header access methods public add default headers header access methods hot message last content replace hot message headers last content trail headers methods return hot headers remove setters wherever possible remove get prefix instead call set content user either specify content construct message write content buffer content write bytes overall cleanup fix
move transport depend channel option specific transport make consistent
spy factor headers extra class like help support method chain possible
fix check style
disable test let fail build time slow linux servers need investigate
fix buffer run snappy code emit copy leave bytes remain
replace atomic reference usage atomicreferencefieldupdater safe example mem defaulthandlercontext instance per connection connection count also kind relate
allow specify mode encoder use form paras allow use auth auth spec small deviations output percent encode parameters add test verify see relevant auth section detail explanation
fix snappyframeddecoder issue checksum header incorrectly read due incorrect order shift mask operations length field byte copy incorrectly interpret due typo binary mask use extract use byte readunsignedbyte instead read byte use bite wise wherever possible use embed rechannel test use byte comparison instead array comparison work revise
move non socket specific stuff socket package
add verify module check ski bundle
clean abstract channel handler imply remove rename channelhandleradapter channelduplexhandler add channelhandleradapter implement channel handler rename combinedchannelhandler combinedchannelduplexhandler improve run time validation remove useful make channeloutboundbytehandleradapter similar channelinboundbytehandleradapter make tail head handler defaultchannelpipeline accept bytes message remove always return true remove various unnecessary null check correct method field name inboundbuffersuspended channel suspend
convert modules ski bundle
add nextbuffertype parameter bytearrayencoder like string encoder consistent parameter order
fix code indentation read file
fix snappy make grateful instead rely uncompress length equal compress length correctly handle copy offset length take copy output buffer decode make maximum encode chunk size compress data
change return allow method chain
use double check lock idiom volatile optimization
remove viz tag focus user guide instead put diagram
byte bridge flush flush anything target buffer writable expandable fix fire inboundbufferupdated bridge flush completely
tell remote address connect exception occur fix
correctly offer full content use construct httppostrequestdecoder
fix problem last content change hot content end never detect
use concurrent shape wherever possible fix
fix incompletion handler stack overflow detection execute callback methods case
fix spy code work
provide future promise without channel reference
make field access via faster avoid unnecessary boundary check also disable time consume test actually regression test
reduce amount memory use handler name fix
make socket code also work httpclientcodec httpservercodec use also refactor handshakes share code make easier implement new one less error prone
fix class cast exception regression introduce cdbfbfafebafdcf
make sure handle outbound message type byte special
add stack trace illegals exception throw promise notify
let channelgroupfuture extend channel future channelgroupfuturelistener genericfuturelistener
fix issue bytes message forward wrong handler
fix memory leak abstractcompositebytebuftest fix
fix memory leak buffer test
fix memory leak defaultcompositebytebuf component another composite debug allow retain release derive buffer
port test handler life cycle process master branch
port fix aka hashedwheeltimer port fix aka follow commit ada also use constants worker state time instead numeric
upgrade kara
correctly handle read direct byte buffer wrap
make singlethreadeventexecutor independent task scheduler relate issue
fix non direct read byte buffer
add websocketframeaggregator take care aggregate fragment socket frame
upgrade maven netty use
enable check style test source directory fix check style errors
fire handshake status events notify user handshake state
deprecate bootstrap shutdown use events group shutdown wherever possible still test use bootstrap shutdown though need non trivial refactoring come soon
keep create many event loop also make event loop create test permutation use daemon thread simplicity need shut event loop
remove special handle object code framework unfold fix primarily write revise commit remove notion unfold code framework completely unfold introduce netty work around shortcoming code framework encode decode allow generate multiple message shortcoming fix change signature encode decode instead introduce obscure workaround like unfold therefore change signature change simple backward incompatible encode decode return anything instead code framework pass message encode decode add generate message message
optimize minimize volatile read access next buffer code framework
move drain logic outputmessagebuf optimize far possible
fix duplicate errors eclipse require release netty build netty parent update
fix problem add new channel handler could block even loop change also introduce change need remove handle add handle remove handler handshake handler handshake future handshake trigger automatically channel become active
fix possible ape fail flush futures close
merge replace remove forward remove
fix bug httpcontentencoder update content length transfer encode correctly add content length remove transfer encode case full message remove content length add transfer encode chunk case non full hot message fix
ensure release component remove composite debug add test reference count composite debug
split dynamic pipeline manipulation test new class replace prefixthreadfactory defaultthreadfactory port latest test branch order write
make sure use construct successful
unwrap composite debug add component another composite debug reference count introduce life cycle issue composite debug add fix
introduce even executor shutdown gracefully deprecate shutdown shutdown gracefully provide two optional parameters give control executor shut relate issue add shutdown gracefully shut deprecate shutdown shutdown replace lastaccesstime lastexecutiontime update task execution accurate quiet period check rural task runshutdowntasks update automatically add updatelastexecutiontime subclasses update add constructor parameter tell add unnecessary wake task execute add ask wake executor thread automatically previously execute always call wake add ask often cause extra dummy task task queue use shutdown gracefully wherever possible deprecation java doc reduce run time singlethreadeventlooptest use custom graceful shutdown parameters change make along commit take ask throw interrupt exception anymore return null interruption wake make sure runshutdowntasks return true even exception raise run shutdown task remove unnecessary shutdown check consistent use singlethreadeventexecutor nan time replace wake override constructor parameter
fix type class name
introduce address envelope message type generic representation address message fix perfectly extent possible current apr add address envelope defaultaddressedenvelope make data packet extend default add rename bytes folder data content message implement address envelope bytes folder data packet without introduce two getter methods content data ram channel implementations understand byte bytes folder message unspecified remote address
add udo client server test
add udo client server test case
spy refactor spdyhttpdecoder allow subclasses access message map
fix illegalbufferaccessexception httppostrequestdecoder also let httppostrequestdecoder extend iterator let exception extend decoder exception
make sure httppostrequestencoder next hunk return last content chunk read
allow use void promise flush write send file also move rename channel unsafe void future channelpropertyaccess void promise
add parameter
optimizations help code
revamp core apr reduce memory footprint consumption apr change make far turn increase memory footprint consumption intention actually decrease memory consumption issue many connections exchange data frequently old netty apr spend lot memory always allocate per handler buffer connection unless otherwise explicitly state user usual real world load client always send request without pause idea buffer whose life cycle bind life cycle connection work expect memory footprint issue old netty apr decrease overall memory footprint great deal many case mainly old netty apr allocate new buffer event object read instead create new buffer handler pipeline work pretty well long number handlers pipeline however highly modular application many handlers handle connections last relatively short period actually make memory footprint issue much worse change retain good change make far better thread model back way deal message events fix memory consumption footprint issue mention make hard decision break backward compatibility follow change remove message merge byte merge channel handler channelinboundhandler similar change make adapter class merge channeloperationhandler channeloutboundhandler similar change make adapter class introduce message list similar netty replace inboundbufferupdated cox message receive cox message list replace flush cox promise write cox message list promise remove replace messagetobyteencoder bytetomessagedecoder bytemessagecodec merge embed rechannel embeddedmessagechannel embed channel add simplechannelinboundhandler sometimes useful channelinboundhandleradapter bring back channel writable netty add channelinboundhandler channelwritabilitychanges event add recvbytebufallocator configuration property similar receivebuffersizepredictor netty exist configuration properties remove byte change would impossible without help fix port improve many part change
use correct value disable enable direct arenas pooledbytebufallocator
spy update object hierarchy
spy always queue data frame stream stall
remove
correctly write message list contain one message
make pool debug recyclable regardless max capacity make internally mutable pool debug completely recyclable
add globalize executor relate issue also extract top level class reuse
rewrite help encoder use gather write
move reference count abstractreferencecounted fix also move rename illegalbufferaccessexception reference interception prettier reference count exception message
make sure write close channel trigger unsupportedoperationexception fix
add channelinboundconsuminghandler useful handler place last position pipeline release receive message automatically
print failure voidchannelpromise use
make sure channel promise write notify use handler
add bytes processor fix need provide optimize implementations though
use index index instead index length relate
spy spdyframedecoder buffer unread data decode headers
improve performance encode header
remove deprecate methods usage also fix problem object would release two time problem release call would call release unsupported message throw exception exception trigger also try release message also use exception type unsupported message channel imply
fix break test
fix class exception set min max scop stream
introduce channel outmatch use apply operations channel group match channel often useful example use channel group hold connect channel want broadcast message except one channel
remove fix possible leakage previous use channel map user still use channel code log unique good enough case
fix handle partial frame handler let handler extend bytetomessagedecoder
remove completely use bite code internally reduce chance collision compare
rename code output recyclable playlist move internal package also reuse handler
fix examples
use configure bytes allocator spdyframeencoder
rewrite channeloutboundbuffer merge message list channeloutboundbuffer make channeloutboundbuffer queue like data structure nearly impossible leak message make channeloutboundbuffer public abstract channel expose subclasses enable gather write nostoc rechannel
fix resource leak test
implement progressive promise notification byte channel chunkedwritehandler refine contract genericprogressivefuturelistener negative total mean unknown useful chunkedwritehandler
fix channel pipeline java docs add lose
change contract resources detector open sample resources recycle also fix problem introduce try implement allow disable resource leak detection
fix indexoutofboundexception call copy empty composite debug
spy ensure channel close happen outbound message write
add test case prove remove within decode method work
test relate self removal pipeline bytetomessagedecoder replay decoder
allow use abstracttrafficshapinghandler also bytes folder base message
make sure direct byte buffer pass underlie channel need otherwise extra byte buffer copy pool implementation even worth multiple time byte buffer always partial write change copy inside netty use allocator one time case
split httppostrequestdecoder httppoststandardrequestdecoder httppostmultipartrequestdecoder add relate issue add interfacehttppostrequestdecoder make httppostrequestdecoder implement httppostrequestdecoder actually delegate httppoststandardrequestdecoder httppostmultipartrequestdecoder remove incompatibledatadecoderexception throw anywhere
fix bug internal buffer implementations derive buffer user create multiple duplicate buffer access internal buffer write multiple duplicate multiple channel assign different event derive buffer internal buffer simply delegate call original buffer derive buffer original buffer internal buffer return buffer lead race condition fix
ability use executor instead thread factory
fill null close allow content
correctly decode arc size use dkl decoder incorrect decode compression exception throw
add test try track buffer issue
remove legacy code need anymore use gather write anyway everywhere
add miss duplicate override interfaces
pass message compression need
add test show write composite debug handler use work relate
add test case write bind data channel imply revert change oil break things underlie socket lazy bind
efficient handle incomplete write problem old way always set write buffer could write write spin count reach mean case channel still writable able write data quick enough case better break write loop schedule write pick later even loop task execute write set write actual return mean room write data need wait notify
need use releasable buffer wrap array
fix bug implementation
readable throw indexoutofboundsexception
spy add support michael score
correctly check reader index try read byte abstractly
implement binary cache protocol change set implement full cache binary protocol spec include first batch test protocol coverage helper class follow
correctly expand byte buffer array case problem handle case correctly double array enough need keep double everything fit
add fixedcompositebytebuf use write array byte efficient way implementation produce much pressure composite debug prefer write array byte bus aware fixedcompositebytebuf read use project make heavy use composite debug write able cut allocation half
minor optimization better default headers iterator
add value save creation link list simple check
make mutable field websocketclienthandshaker volatile fix
allow override wrap direct byte buffer allocate make easier extend
merge package private interfaces public ones relate
fix ape raise hot headers equal forecast one arguments null
add test case
optimize clean log handler use instead simpler string concatenation prettier presentation optimize overall performance format methods format methods expect encode channel information string builder instance create less often use look table generate per row prefix hide format debug formatbytebufholder formatnonbytebuf user user always override format cox even name arg example disable dump protect void format channelhandlercontext cox string even name object arg arg instance byte even name arg string else even name arg
code cache fix decode issue value part change set fix issue decode would stop value come separate two packets lead invalid bytes read
add cml decoder base work ready merge yet
fix false positive leak derive buffer swap buffer leak aware buffer must wrap leak aware buffer
fix buffer leak binarymemcachedecodertest
fix another buffer leak binarymemcachedecodertest
code cache need allocate buffer extra use
fix compilation error
add cross origin resource share cars handler
remove unnecessary code httpobjectdecoder enable help test since netty help decoder generate full message therefore need keep separate state content smaller matchup size matchup size must greater set disable chunk encode dedicate flag comment test comment unknown reason fix add test help decoder remove ignore annotation test
correctly format default request string
move reusable class netty test suite deploy
fix bug spdyheaderblockzlibdecoder fail decompress forward port originally write fix
spy example app
merge attribute map channelhandlercontext channel fix also fix generics warn
spy client example demonstrate usage spy client perspective one also use spy enable browser client easier understand internals protocol client point view code debug
add log message deletion failure
add example cache binary code motivation currently exist example show use cache binary protocol modifications add example client client handler show utilize binary protocol cache client simple interactive shell result users look example start provide one
initial stomp protocol work
provide optimize atomicintegerfieldupdater atomiclongfieldupdater atomicreferencefieldupdater
fix bug composite debug touch nothing
clean httpobjectaggregator
expose callback httpobjectaggregator handle oversized message relate
introduce native transport linux use poll transport use uni directly make use poll edge trigger mode maximal performance linux beside also support use top cork produce less transport use build linux skip build linux use transport produce jar contain need file bite bite user need include jar dependency usually make use use correct class include also cleanup
move mark channel promise write cancellable add flush keep things simple
directly use memory address gather write reduce pressure part also factor logic channeloutboundbuffer mainly need buffer many transport also need copy heap direct buffer functionality move niosocketchanneloutboundbuffer also introduce epollchanneloutboundbuffer make use memory address write reduce pressure
fix bug httpobjectaggregator always produce full message fix always convert unfurl invalid message full message
overall clean httpobjectaggregator handle oversized response differently relate
always upstream full cache message change set relate expose failure help code cache code work similar addition better failure handle decoder add
fix regression handle auto read channel read regression introduce
implement thread cache pool buffer minimize condition fix motivation remove synchronization bottleneck pool arena speed things modifications implementation use kind technics outline email paper email blog post moment cache know thread power even executors others keep overhead minimal need free unused buffer cache free cache buffer thread complete use multi level cache tiny small normal allocations huge allocations cache keep memory usage sane level different cache configurations adjust via system properties constructor directly make sense result less condition allocations serve cache
filter implementation netty
fix buffer leak test introduce implement lib none support relate
make sure local remote inetsocketaddres obtain part motivation make sure remote local inetsocketaddress obtain correctly modifications set remote local inetsocketaddress bind connect operation perform result possible still access information even become invalid mirror behaviour
update java doc channel handler channelhandlercontext motivation date break link etc modifications back port fix master result better java doc
fix bug respect channel confirm set thread false also fix channel read oil motivation moment change confirm set thread false guarantee extra channel read trigger use within channel read channel complete method correct behaviour also work methods trigger within even loop example valid use case call within channelfuturelistener currently work expect beside another bug kind relate currently channel read work expect oil stop try read even nothing could read one read operation socket timeout kick modifications implement logic right way native transport specific transport implementation also correctly handle channel read oil transport trigger new read timeout cache result also possible use channel confirm set thread false methods call within even loop direct
implement poll base data channel motivation currently poll base data channel add one make set provide channel complete also able offer better performance compare niodatagramchannel reuse port implement modifications add implementation data channel use poll implementation currently support multi cast yet implement later users use multi cast anyway think fair add epolldatagramchannel without support ship niodatagramchannel without support earlier result able use epolldatagramchannel max performance linux
spy refactor frame code implementation motivation currently spy frame encode decode code base upon channel handler abstraction require maintain multiple versions possibly move forward modifications spy frame encode decode code separate channel handler spa frame abstractions also test coverage improve result spdyframecodec implement channel handler abstraction responsible create handle spa frame object
fix buffer leak spy test motivation fix leak report spy test modifications use make sure everything release test result leak report run test
fix buffer leak spdyframedecodertest motivation fix leak report run spdyframedecodertest modifications make sure produce buffer spdyframedecoder release result leak report run test
add matt protocol code matt open source protocol top top widely use mobile communication also internet things today add open source implementation matt become easier netty users implement matt application information matt protocol read
synchronize master motivation diverge long time ago recently revert early commit master must make sure master different modification fix find differences result master get closer
remove continuationwebsocketframe aggregate text motivation aggregate full text websocketframedecoder fill continuationwebsocketframe aggregate text problem upper limit would possible see home remote peer send textwebsocketframe never end stream continuationwebsocketframes furthermore aggregation really belong websocketframedecoder provide extra channel handler anyway websocketframeaggregator modification remove continuationwebsocketframe aggregate text method correspond constructor also refactored websocketframedecoder bite efficient possible need aggregate result risk home frame
minimize memory footprint hashedwheeltimer context switch motivation moment two issue hashedwheeltimer memory footprint pretty heavy empty instance way add timeouts handle inefficient term lock etc use lot context switch condition happen modification rewrite hashedwheeltimer use optimize bucket implementation store submit timeouts misc queue handover timeouts volatile write reduce minimum also memory foot print bucket reduce lot bucket use double link list beside use atomic field updater ever possible improve memory foot print performance result lower memory footprint better performance
spy ensure spdyheaderblockrawdecoder always read entire input
add open engine universal apr enable sol motivation users already use engine implementation finagle native wrap open get higher sol performance however take advantage finagle native must compile manually mean pull dependency thus test handler open base engine instance construction procedures engine open engine different also need provide universal way enable sol netty application modifications pull netty native optional dependency back port nativelibraryloader move open base engine implementation code base copy finagle native originally write overall cleanup run handler test default engine open engine add unify apr create sol context context allow create new engine new handler pics key certificate chain add job context subclasses add opensslservercontext add applicationprotocolselector ensure future support non dextro tone alan application layer protocol negotiation client side add simpletrustmanagerfactory help user write trustmanagerfactory easily useful need write alternative verification mechanism example use implement unsafe trustmanagerfactory accept self sign certificate test purpose add insecuretrustmanagerfactory fingerprinttrustmanager quick dirty test add selfsignedcertificate class generate self sign certificate easily update examples use handler log choose cipher suite handshake finish result cleaner unify apr configure sol client sol server regardless internal implementation native libraries available open base engine implementation select automatically take advantage performance benefit examples take advantage modification thus cleaner
split son byte stream son object array fix motivation see git hub issue modifications introduce class jsonobjectdecoder split son byte stream individual son result netty application handle byte stream multiple son document follow oppose single son document per request
introduce text headers asci string motivation quite bite code duplication spy stomp code notion headers multi map string name value modifications add text headers default implementation add asci string replace hothead identity borrow portion apache harmony implement hot headers spa headers stomp headers use text headers add asciiheadersencoder reuse encode text headers use dedicate encoder help headers better performance though remove shortcut methods spa headers replace spa headers get status httpresponsestatus parse line result remove quite bite code duplication header implementations slightly better performance thank improve header validation hash code calculation
back port additional change master add useful static methods asci string add letter text headers remove unnecessary utility methods spdyhttpheaders
reduce memory copy spy compression implementation motivation currently memory copy need modification directly use heap buffer reduce memory copy correctly release buffer fix buffer leak result less memory copy leak
correctly check reference count try work underlie memory motivation use reference count need check reference count operation touch underlie memory especially true use sun misc cleaner clean release memory asap possible user may cause segfault operation call try access back memory release modification correctly check reference count methods access underlie memory expose via byte buffer result safer usage byte
use correct even loop notify delay bind failures motivation bind fail abstract bootstrap use globalize executor notify channel promise use even loop channel possible modification use even loop channel possible use correct thread notify guarantee right order events result use correct even loop notification
reuse previous create hot headers httpobjectaggregator motivation httpobjectaggregator currently create new full response full request message need aggregate also create default header instance one headers one trail headers bad two reason object create need also populate headers free headers may get validate even validation disable decoder modification wrap previous create hot response hot request reuse original hot headers reuse previous create trail hot header fix bug trail hot header incorrectly mix headers result less faster httpobjectaggregator implementation
implement zip encoder motivation zip encoder provide send data compress zip format modifications add class zip encoder zip writer ziploc compressor bzipdivsufsort bziphuffmanallocator bziphuffmanstageencoder bzipmtfandrlestageencoder bzipencodertest modify class zip constants splice block header magic end stream magic zip decoder use splice magic number add integration test result implement new encoder compress outgo data zip format
support write spin also native transport motivation implementation use write spin maximize throughput native implementation use modification respect write account native transport result better throughput
handle nov max java code motivation handle nov max uni code base make stuff really complicate maintain etc modifications move handle nov max java code simplify stuff result cleaner code
fix compression cod motivation fix found mistake compression cod modifications change return type lib til inflate exception compression exception decompression exception update java doc july decoder throw decompression exception instead compression exception fix dkl decoder throw decompression exception instead compression exception remove unnecessary empty line dkl encoder july encoder remove public modifier snappy class add max uncompress data size constant snappyframeddecoder use readable bytes instead write index reader index snappyframeddecoder add private modifier end chunk type snappyframeddecoder fix potential bug sum overflow bziphuffmanallocator first info see result fix sum overflow bziphuffmanallocator improve exceptions lib decoder implementations hide snappy class
fix improvements intobjecthashmap relate rewrite linear probe state array compaction cleanup optimize key value use reflection optimize code equal efficient iteration fix equal return true equal null optimize iterator allocate new entry next add string add new unit test
refactor integration test compression cod motivation duplicate code integration test different compression cod modifications add abstract class integration test contain common test compression code remove common test zip integrationist integrationist implement abstract methods integration test zip integrationist integrationist snappy integrationist result remove duplicate code integration test compression cod simplify addition integration test new compression cod
improve motivation change zip treader zip writer access byte byte byte test zip compression code take lot time run paranoid level resource leak detection information see comment modifications increase size bite buffer bits improve read write operations save link incoming byte inside zip treader add methods check possible readable bits bytes zip treader update zip class use new apr zip treader add new constants zip constants result increase size bite buffer improve performance zip compression code general work test paranoid level resource leak detection
allow notify channelfutureprogresslistener complete write motivation inconsistency handle write sometimes call also complete write sometimes call always modifications correctly call complete incomplete write result consistent behavior
improve traffic shape handler motivation currently traffic shape use timer could lead partial wrong bandwidth computation short time occur add use bytes traffic counter update finally traffic compute indeed traffic counter update every delay time save last bytes set therefore one request counter first update traffic counter add use bytes value set traffic counter update bandwidth computation use traffic counter value value reset delay occur therefore traffic shape computation wrong rare case secondly traffic ship avoid possible timeout effect stop read write max time max time less timeout limit thirdly traffic ship read issue since read set turn read block socket point view modifications traffic counter new methods compute time wait accord read write use priority current bytes could use current last exabytes therefore chance take account real traffic moreover handler could change default max time wait default set half standard time finally add set thread boolean accordingly situation propose pull request error unknown reason result traffic shape better take account value try block traffic time event moreover read really stop socket point view version similar version include pull request ease merge process compatible master include also test minimize time check reduce step
add variants relate issue motivation moment way get remove header one call mean need search headers two time add gean remove allow one call modifications add gean remove getunconvertedandremove variants result efficient apr
fix resource leak stompsubframedecodertest
add sock package support sock motivation sock different protocols although share name possible incorporate two protocol versions single package modifications add new package call sock supersede sock package add sock support sock package result code sock support sock versions
fix issue relative unstable traffic shape test procedure motivation test procedure unstable due enough precise time stamp check modifications reduce test case cable stable test timestamp able bring stability test result test traffic panhandler seem stable whatever use jim
code sock test cleanup motivation unit test code sock contain redundant cast empty test class modifications remove redundant cast delete empty test class result cleanup
allow write composite debug directly via epolldatagramchannel relate motivation linux possible use send system call write multiple buffer one system call use modifications implement need change make use send possible max performance add test test send data ram packets kind different byte implementations result performance improvement use compoistebytebuf epolldatagramchannel
add proxy support client socket connections relate issue motivation support client socket connections via proxy server netty modifications add new module handler proxy add proxy handler subclasses support sock help proxy connections add full parametrized test scenarios clean result user make outgo connection via proxy servers trivial effort
modify httpobjectdecoder allow parse help headers multiple step motivation moment whole help header must parse lead multiple parse bytes better allow parse multiple step modifications parse headers multiple time simplify code eliminate necessary string creations use read slice retain possible result performance improvements show include benchmark change nearer run test thread connections thread stats avg side max side latency req sec request read request sec transfer sec change nearer run test thread connections thread stats avg side max side latency req sec request read request sec transfer sec
integrate non block cml parser netty code motivation provide non block cml parser netty code modifications new code decoder decode cml feed netty without block result non block cml stream parse
add support extensionregistrylite proton decoder motivation extension registry subclass extensionregistrylite proton decoder use registry directly simply pass photo apr photo call question write term extensionregistrylite extension registry modifications require extensionregistrylite instead extension registry proton decoder result consumers use extensionregistrylite proton decoder
add support send mag allow write multiple data packets one say call relate motivation linux glib possible send multiple data packets one say call huge performance win support native transport modification add support send mag reuse array factor thread local support array iovarraythreadlocal better separation use array also without thread local nativedatagrampacketarray introduce nativedatagrampacketarray use send mag implement send mag via uni expand datagramunicasttest test also send mag result netty automatically use send mag support data packet channeloutboundbuffer flush call
inv address string rec motivation java implementations address ethos name follow rec recommend string representation introduce inconsistencies integrate technologies follow another public static method convert address string address use java address ethos address implementation new code implement rec inv string conversion new unit test test new method result netty provide rec compliant string conversion method inv address
provide helper methods bytes write char sequence relate motivation expose methods byte directly write char sequence lead user either convert char sequence first byte array use charge encoder case overheads lot better well know char set like uhf modifications add task optimize way especially true pass byte extend abstractly true implementations wrap another byte result write uhf char sequence abstractly lot faster user could make use package private methods eliminate reference range check char seq uhf still good job par case user would follow benchmark show improvements result average statistics min avg max side confidence interval benchmark mode sample score score error units string string array stringviaarraywrapped string wrap via array viagra wrap wrap string string array stringviaarraywrapped string wrap via array viagra wrap wrap test run failures errors skip time elapse sec result test run failures errors skip result test run failures errors skip via array benchmarks basically string get bytes char set others use
back port header improvements motivation header class hierarchy algorithm improve master branch versions improvements back port baseline modifications cherry pick follow commit master branch result header improvements master branch available branch
add generic versions promise greater promise notifier motivation channelpromiseaggregator channelpromisenotifiers allow consumers work channel result type generic versions class allow consumers aggregate broadcast result asynchronous execution result type modifications add promise greater promise notifier add unit test remove code channelpromiseaggregator channelpromisenotifier modify extend new base class result consumers aggregate broadcast result asynchronous execution result type channel
back port alan mutual auth sol motivation improvements make main line support alan mutual authentication tvs back port modifications back port commit master branch result support alan mutual authentication
add exceptions contact return code matt specification motivation matt matt server must send contact return code connect request contain invalid client identifier unacceptable protocol version return code one mqttconnectreturncode meet decoder throw decoder exception connect request contain invalid value without distinguish situations make difficult code matt users send response return code clients modifications add exceptions client identifier reject unacceptable protocol version meet decoder throw exceptions instead decoder exception result users code matt distinguish invalid connect contain invalid client identifier invalid protocol version users send contact return code clients
add opensslclientcontext allow create engine client side motivation support open server side moment would also useful client side modification upgrade new netty native snapshot support client side open support add opensslclientcontext use create engine client side usage factor common logic opensslclientcontext opensslservercontent new abstract base class call open context correctly detect handshake failures soon possible guard segfault cause multiple call destroy pool happen open context throw exception constructor finalize method call later result open use client servers
use trust manager certificate verification motivation make open context drop replacement joke context need use trust manager modifications correctly hook trust manager result better compatibility
allow use custom trustmanagerfactory jdksslservercontent opensslservercontext motivation use client auth sometimes need use custom trustmanagerfactory modifications allow pass trustmanagerfactory result possible use custom trustmanagerfactories jdksslservercontext opensslservercontext
remove bottleneck create inetsocketaddress native transport motivation every time new connection accept via epollsocketserverchannel create new pollock channel need get remote local address constructor current implementation use new inetsocketaddress string int create quite slow due implementation oracle open modifications encode need information byte array return uni layer use new inetsocketaddress address int create socket address allow create address via byte reduce overhead either use byte int result reduce performance overhead accept new connections native transport
overall cleanup cfcdfdcbabdbc
fix big transfer write traffic shape issue motivation several issue show various ticket also use improvement writ ability user management finally add mite handler global channel advantage uniquely create use less memory less shape issue huge amount data write current behavior traffic shape handler limit delay whatever delay previous write wrong huge amount write short time traffic correctly sharpen moreover high risk room one use handler instance channel future add listener handle write buffer station traffic panhandler fix use user define writ ability flag allow traffic panhandlers user define manage writ ability directly read thus use default writable channelwritabilitychanged allow instance httpchunkedinput fully compatible bandwidth compute write acquire write order real write order wrong statistic point view issue use globaltrafficshaping every write read synchronize thus lead drop performance channeltrafficshaping touch issue since synchronize correct handler per channel synchronize modifications current write delay computation take account previous write delay time check delay max time really exceed use last schedule write time algorithm simplify time accurate proposal use improvement user define writ ability flag real write occur statistics update accordingly new attribute getrealwritethroughput limit synchronisation synchronize globaltrafficshapinghandler submit write remove replace lock per channel since synchronization still need prevent unordered write per channel kendall valid method reason also synchronize traffic counter remove unnecessary since already lock caller still creation remove operations lock per channel per channel object synchronize prevent concurrency issue critical part limit additional change use system nan time instead system currenttimemillis minimize call remove since sleep usage use nan time instead current time time spend compute real time clock therefore relative time nan time base pass sub methods take care removal handler force write pending write release read review java doc explicit recommendations take account writable recommendations provide reasonable message size accord traffic shape limit explicit best effort traffic shape behavior change configuration dynamically add mixteglobalchanneltrafficshapinghandler allow use one handler mix global channel ash enable save memory try optimize traffic among various channel result traffic shape stable even huge number write short time take consideration last schedule write time current implementation traffic panhandler use user define writ ability flag default writable firechannelwritabilitychanged work expect statistics valuable ask write real write global traffic panhandler less global synchronization hop minimum still per channel need global channel traffic panhandler allow one handler channel still offer per channel addition global traffic shape finally maintain backward compatibility
allow lazy create default region file motivation provide constructor default region take file channel mean file need get open construction problem want write lot file fast may end may open even need yet lead hit open limit modifications add new constructor default region allow construct file file channel obtain transfer call default region explicit open via open need native poll transport result less resource usage write lot default region
fix backward compatibility previous back port motivation commit change type constants make backward incompatible also introduce newer utility class hothead erotic deprecate static methods hot headers ease migration deprecate static methods non existent provide proper counterpart modification revert change value deprecate static methods hot headers favor hothead erotic member methods hot headers asci string add integer date access methods hot headers easier future migration add hothead rename hothead value provide standard help constants asci string deprecate value make lowercase actually lowercase socket versions oldest one add rtspheadernames rush undervalue provide standard tsp constants asci string deprecate headers use char seq one parameters asci string avoid use asci string string repetitively change parameter type methods string char sequence result backward compatibility recover new class methods make migration easier help tsp header name value port master
add support top info use pollock channel motivation linux gather various metrics use get copt top info modifications add pollock channel info return poll info expose metrics expose via get copt top info result top info support implement
eliminate memory copy bytetomessagedecoder whenever possible motivation currently bytes leave cumulation buffer byte copy produce input buffer decode method put quite overhead imply modification use composite debug eliminate byte copy allow specify composite debug use handlers act one byte buffer efficient way like handler result performance improvement show follow benchmark without patch xxx run test thread connections thread stats avg side max side latency req sec request read request sec transfer sec patch xxx run test thread connections thread stats avg side max side latency req sec request read request sec transfer sec
efficiently handle write wrap composite debug use handler motivation poor job handle composite debug always call byte buffer memory copy composite debug use back multiple byte modifications use allow wrap composite debug efficient manner reduce object allocation unwrapnonappdata result performance improvement composite debug write handler channel pipeline
add back motivation although new bitmap value return collection useful remove value class return array also useful also good backward compatibility modifications add back miscellaneous improvements cache collection return intobjecthashmap value inspector warn update intobjecthashmaptest test value result backward compatibility potential performance improvement value
reduce memory copy use open engine handler motivation use open engine handler possible reduce memory copy unwrap multiple byte buffer time way eliminate memory copy need otherwise cumulate partial receive data modifications add method use unwrap multiple sec byte buffer time use composite buffer handler inbound data need memory copy add handler open engine use inbound byte back one byte buffer reduce object allocation result handler faster use open engine produce less
ensure handle buffer consistent way cause leak motivation moment two problems add supply buffer composite debug empty mean release composite debug release call problem user expect everything add release user know add either add buffer none readable problem add component directly release byte least one byte readable give inconsistent handle may lead memory leak modifications always add buffer composite debug release release call result consistent handle buffer leak
generate non test jar netty test suite motivation far generate deploy test jar maven repositories deploy jar classifier test jar test jar consume transport native poll test dependency problem netty transport native poll pull test jar dependency maven resolve transitive dependencies compile run time scope incorrect bite problem recently try add new dependency netty test suite add new dependency test scope new dependency pull transitively transport native poll cause unexpected build failure modifications move class netty test suite update compile scope dependencies netty test suite override test directory configuration properties surefire plugin generate test jar anymore update dependency netty transport native poll result less error prone add new dependency netty test suite
compress heap dump test finish motivation test sometimes time take long compress generate heap dump modifications move compression logic new method compress pump call test tip compress pump end test test fail timeout result unit report real cause test failure instead timeout exception
allow use websocketclienthandshaker websocketserverhandshaker hot response hot request motivation use websocketclienthandshaker websocketserverhandshaker currently requirement httpobjectaggregator channel pipeline big deal user want server sockets limitation server serve sockets normal help traffic modifications allow use websocketclienthandshaker websocketserverhandshaker without httpobjectaggregator channel pipeline result flexibility
add support unix domain sockets use native poll transport motivation use unix domain sockets useful communication take place host less overhead use loop back support native poll transport modifications add support unix domain sockets adjust test suite able reuse test result unix domain sockets support use native poll transport
fix several issue httpcontentdecoder motivation httpcontentdecoder follow issue chunk content decoder set invalid content length header length first decode chunk decode full request put original content decode content output result use httpobjectaggregator decoder lead errors request expect continue header acknowledge decoder pass header message handler chain content receive client expect continue response deadlock happen modification invalid content length header remove handlers chain either rely last content message ask httpobjectaggregator add header full request split hot request hot content decode part header hot request part request send chain soon receive result issue fix unit test add
fix ape remote address obtain motivation native transport use get username obtain remote address file descriptor may fail various reason case null return modifications check null try obtain remote local address result ape
back port code master motivation code implement master branch since master yet stable time get release back port enable people use code stable netty version modification code copy master branch minor modifications suit apr apart change two backward incompatible apr change include namely add abstract method implement delegate internal instance add method implementations copy relevant place master branch add miss abstract method relate set add short value result code use netty
remove rec prefix cookie encoders decoders motivation better replacement old thus point keep modifications remove old remove rec prefix new cookie encoder decoder class deprecate cookie decoder result much better cookie encoder decoder implementation
opportunity lazy initialization headers interface motivation headers interface two member variables addax visitor metal visitor necessarily always need always instantiate may result excess memory use modifications addax visitor access via method addax visitor use lazy initialization metal visitor access via method addax visitor use lazy initialization result potential memory save use lazy initialization
various performance optimizations open engine motivation various place open engine performance optimizations modifications reduce uni call possible detect finish handshake soon possible eliminate double calculations wrap multiple byte buffer possible loop result better performance
allow use motivation moment embed channel use channel handler try schedule task throw unsupportedoperationexception make impossible test handlers even reuse embed channel modifications factor reusable schedule code abstractschedulingeventexecutor let embeddedeventloop singlethreadeventexecutor extend abstractschedulingeventexecutor add embed channel runscheduledpendingtasks allow run schedule task ready result embed channel usable even channel handler try schedule task
consolidate stream state motivation hot stream several methods provide state information need simplify state use consolidate many field possible modifications since already concept stream active inactive separate deactivation stream act close reason case send frame end stream true case want close stream immediately order disallow write want mark stream inactive write complete since inactive event trigger flow controller cancel pending write stream deactivation separate able eliminate additional state methods exception still require need ignore inbound frame case per spec since remote endpoint may yet know stream close result fix
httpdefaultframewriter micro benchmark motivation micro benchmark useful get baseline performance modifications introduce new micro benchmark test httpdefaultframewriter allow benchmarks run without thread context switch netty result micro benchmark exist test performance
respect channel confirm rewrite discount use poll transport motivation write account ignore poll transport keep try write could cause unnecessary cup spin slow remote peer read data slow modification correctly take write account account write result less cup spin write slow remote peer
correctly set pollard stream channel motivation fix regression introduce miss set pollard stream channel modifications correctly set pollard stream channel abstractepollstreamchannel constructor result test failures poll domain channel test
document contract set motivation attribute gean remove return value also remove attribute key attribute map may want may want keep instance set later document contract user know expect modifications make clear use attribute key gean remove attribute key remove attribute key get handset null attribute key set null result less surprise behaviour
fix premature cancellation pending frame help flow control motivation headers data frame pending due small flow control window frame end stream flag set wrongfully cancel pending frame include also see modifications transition stream state close half close due set end stream flag delay frame flag actually write channel result flow control work correctly frame end stream flag longer cancel precede frame
add support alan use open non client mode support cipher filter motivation support help need support provide use open engine engine one bet beside cipher filter support modifications upgrade netty native make use new feature support alan non server client mode guard segfaults sol pointer free support correctly different failure behaviours add support cipher filter result able use open engine alan non server client
remove frame class defaulthttpremoteflowcontroller fix motivation every write flow control frame headers data allocate frame object necessary anymore maintain state besides payload modifications remove frame class directly add payload pending write queue result one object allocation per write flow control frame
add support xextendedtrustmanager use open engine motivation use case xextendedtrustmanager need allow also access engine validation modifications add support xextendedtrustmanager java result possible use xextendedtrustmanager open engine
revamp code motivation various know issue netty code message type interfaces make difficult user implement message implementation class name field name match term rec support decode record limit user encode decode separation header message unnecessary although fine conceptually buffer leak cause message difficult analyse leak detector track underlie byte rather message message assume send end message user create new record class instance unnecessarily modifications make message type interfaces add default implementations rename class properties constants match rfcs resource record type door ecotype many remove class use integer support end better add default implementations record require data byte anymore add door record catch record type merge header message make resources detector track abstract message remove properties wrap message address envelope add diagram inquest datagramdnsresponse ease use rename unique encoder datagramdnsqueryencoder rename dnsresponsedecoder datagramdnsresponsedecoder miscellaneous change add result cleaner apr support top easily future reduce memory footprint default implementations better leak track message possibility introduce new record type future provide full record encoder decoder implementation unnecessary instantiation end pseudo resource record
refactor test compression cod motivation many duplicate code test different compression cod modifications add abstract class abstractcompressiontest abstract detest abstract detest contain common variables test compression code remove common test implement abstract detest abstract detest current test compression cod implement abstract methods abstract detest abstract detest current test compression cod add additional check current test rename abstract class integration test abstract integrationist use theories run test head direct buffer remove code duplicate result remove duplicate code test compression cod simplify addition test new compression cod
fix away logic hot encoder hot decoder motivation current implementation allow headers data ping priority settings frame send away receive send away frame stream ids greater last stream away frame close happen modifications allow send headers data frame away stream ids last stream always allow send ping priority settings frame allow send multiple away frame decrease last stream receive send away frame close stream ids last stream result away handle correct
change pool headache use life better cache performance motivation moment use fife pool headache sub optimal may reduce change cache memory actual still cup cache modification change use life increase chance able serve buffer cup cache result faster allocation thread local cache commit xxx work connection keep alive run test thread connections thread stats avg side max side latency req sec request read request sec transfer sec commit xxx work connection keep alive run test thread connections thread stats avg side max side latency req sec request read request sec transfer sec
include error code message away events motivation away event handler currently provide additional information require applications hack ways get error code debug message modifications modify interface pass error code message trigger away result application use away process
decoder reduce preface conditional check motivation defaulthttpconnectiondecoder class call verifyprefacereceived almost every frame event time httpconnectionhandler class call readclientprefacestring every decode event modifications defaulthttpconnectiondecoder continuously call verifyprefacereceived transition boolean state time connection httpconnectionhandler continuously call readclientprefacestring transition boolean state time connection result less conditional check mainstream usage connection
close stream conditional priority tree removal motivation specification allow close stream state exist priority tree current code remove stream priority tree soon close subject removal policy may lead undesired distribution resources peer perspective modifications remove stream priority tree descendant stream viable state track tree edge change nod remove enviable nod remove result priority tree remove close stream descendant close descendants
create motivation context factory methods get control past time swap builder modifications new builder class exist factory methods must leave backward compatibility result fix
clean initialization httpconnectionhandler motivation currently take builder encoder decoder make difficult decorate modifications remove builders interfaces entirely leave builder decoder imply remove encoder since constructor take parameters also add decorator base class encoder decoder make compressorhttpconnectionencoder extend decorator result fix
prevent modification active stream iterate motivation hot connection interface expose active stream method allow direct iteration underlie collection place make copy collection avoid modification iterate place make copy copy operation expensive hot code paths also consistently iterate active stream collection modifications hot connection interface reduce exposure underlie collection expose necessary interface function mean iterate collection default connection use new interface protect internal state iteration occur result reduction surface area hot connection interface consistent iteration set active stream concurrent modification exceptions handle encapsulate spot
remove unnecessary use priority algorithm motivation currently use necessary exchange lighter weight operation modifications change logic ensure allocate least one byte child rather always perform ceil result slight performance improvement priority algorithm
headers code use string instead asci string motivation headers code use binary string currently asci string object instead string object defaulthttpheadersencoder still use string sensitive headers modifications remove usage string defaulthttpheadersencoder introduce interface determine header name value sensitive prevent necessarily create copy set allow name value consider check sensitive result string defaulthttpheadersencoder less require set creation operations
bytes ring introduce asci string super class motivation usage code within asci string exceed original design scope class usage binary string confuse verge violate interface assumptions spot modifications bytes ring create base class asci string generic byte handle process live bytes ring special character encode live asci string result asci string interface clarify users asci string clear limitations class impose users bytes ring class live limitations
headers stream dependency fix motivation defaulthttpconnectiondecoder set priority call httpframelistener notify change set priority call additional verification logic may even create dependency stream must httpframelistener notify modifications defaulthttpconnectiondecoder treat set priority call headers priority frame call notify listener result httpframelistener see correct state headers frame stream dependency yet create yet fix
priority tree benchmark motivation benchmark measure priority tree implementation performance modifications introduce new benchmark populate priority tree shuffle parent child link around result simple benchmark get baseline code priority tree implementation
optimize user define stream properties motivation stream currently maintain hash map user define properties show add significant memory overhead well performance bottleneck lookup frequently use properties modifications modify connection stream use array storage user define properties index class identify index array property store result stream process performance improve
priority tree circular link motivation exclusive dependency change stream exclusive dependency stream request stream already child stream add children map create circular link priority tree lead infinite recursive loop stack overflow exception modifications removal children call remove exclusive dependency unit test ensure case cover result circular link priority tree
motivation readable bytes unnecessary java channel write modification readable bytes zero return result logic easy understand little faster
flush write httpchunkedinput motivation miss flush channel use httpchunkedinput use sol result stale modifications replace result correctly work example
flow controller interface update motivation flow control require part specification currently structure like optional item must access property map time consume represent require nature access pattern give insight flow control outside code flow controller implementation modifications create read public interface local state remote state add local state local state remote state remote state hot stream result flow control part hot stream interface clarify responsibility logical relationship interfaces flow controller longer must acquire though map lookup
connection listener unchecked exceptions motivation default connection check exceptions invoke methods problem reason state default connection corrupt listener throw exception first listener throw listeners notify may corrupt state update result listeners notify modifications document exceptions support methods log error update default connection handle exception listener notify sure listener throw exception prevent others notify result robust default connection
let composite debug implement miserable motivation composite debug iterator method fail implement miserable modifications let composite debug implement result easier usage
add netty tile example motivation add example showcases netty code slightly complex exist hello world example base gopher tile example available modifications move current help example add help tile example result netty tile example available
map stream channel motivation allow use handlers stream normal netty style frame read write channel message directly callback method call handlers allow mix ease interoperability eventually support handlers vise versa modifications new handler httpmultiplexcodec convert current apr message base apr child channel stream result basics server side new stream trigger creation new channel much appearance new connections trigger new channel creation basic frame headers data handle also away stream inbound flow control implement outbound later along complete write promise child channel write actually complete parent yet support outbound priority weight push promise many feature generic object may set stream frame also pave way client side support need way refer yet create stream due headers allocate stream allocation order must transmission order
add support splice motivation linux support splice transfer data one file descriptor another without pass data user space allow write high perform ant proxy code stream stuff socket directly file system modification add method support splice system call result splice support use native linux
correctly test non auto read correctness test suite motivation test non auto read actually test correctly auto read never disable bootstrap server bootstrap modifications correctly disable auto read bootstrap server bootstrap fix test call channelhandlercontext read channel become active result correctly test non auto read work
faster memory efficient headers help stomp spy fix motivation notice headers implementation netty use quite lot memory also least performance randomly access header quite poor main concern however memory usage profile show default headers use lot memory also waste lot due underlie map resize potentially several time new headers insert track issue modifications redesign default headers simply take map object constructor implement class use map primitives way implementation concise hopefully easy understand allow concrete headers implementation provide map even use different headers implementation process request write responses incoming headers need provide fast random access outgo headers need fast insertion fast iteration new implementation support hardly code change also come advantage netty project decide add third party collections library dependency one simply plug one fast memory efficient map implementations get faster smaller headers free use tree map help default headers result significantly fewer line code implementation total commit still roughly line less actual implementation lot less add test micro benchmarks overall performance current implementation significantly faster insertion retrieval however slower come iteration simply way tree map iteration performance link list use current headers implementation totally fine though look benchmark result point performance headers completely dominate insertion insertion significantly faster new implementation make several time iteration speed iterate insert demonstrate spreadsheet actually iteration performance help significantly improve memory implementation tree map use avg less memory also produce garbage resize load test see memory reduction per summarize memory improvements spreadsheet data generate use job original intend improve memory usage similarly improve help spy stomp share common implementation
remove duplicate code constant pool class motivation currently value new instance use almost code create new constant maintainability better share duplicate code among notification add new private function checknotnullandnotempty check whether name constant null empty new constant create new constant result compact source code improvement maintainability
get upload size upload progress proposal fix issue motivations currently add next buffer decoder way access current help object decode since available currently fully decode could want know progression overall transfer also per help object overall progression could use available global content length request take account hot content size per hot data object progression unknown modifications help object protect properties name respectively supposedly final size current decode size provide new method get current value attribute reachable method note however different ways currently manage reset time value less actual buffer add value increase since final length know content length set startup length provide differences could lead wrong perception define size size always define size size always therefore comment try explain clearly different behavior interfacehttppostrequestdecoder derive class add new method return current generic type allow programmer check accord real type instance methods method check current upload current attribute null return one one could null null note method return null might mean situations last whatever attribute file upload already finish therefore accessible yet decode body yet parse instance result developer access therefore control current upload cod developer side could look like example httpuloadserverhandler
improve performance string til simple assume motivation static package get package class use synchronize block internally thank hint initial report issue modifications use simple last index sub string faster implementation result lock condition
flow controller require memory reduction motivation currently allocate full amount state stream soon stream create keep state stream full set state need stream support flow control frame opportunity reduce require amount memory make memory eligible sooner allocate necessary flow control stream state modifications introduce object require less state local remote flow control stream state use new object stream create transition idle stream longer eligible flow control frame transfer still must persist priority tree result memory allocations reduce actually need memory make eligible potentially sooner
remove explicit flush help encoders decoders flow controllers motivation allow users help control flush occur optimize network write modifications remove explicit call flush encoder decoder flow controller connection handler call flush read complete enable batch write response read result much less flush occur normal help request response pattern
warn cleanup motivation spot code warn generate avoid modifications clean cause warn result less warn
fix miss resource leak close abstract message motivation resource leak close must call reference count resource reallocate abstract message reallocate forget call modifications call resource leak close track abstract message instance result fix false resource leak warn
support empty help responses use compression motivation find bug netty would generate byte body return response help head bytes seem relate compression footer rec section state responses help head must return message body response netty client implementation expect empty response extra bytes lead response error decoder result invalid version format modifications track help request method process response determine response pass thru unchanged decision take account request method pass thru responses relate help head request result netty help client work better rec conformance
swap sslcontextbuilder examples motivation use factory methods context deprecate code use sslcontextbuilder instead would old methods deprecate cache help examples exist branch modifications swap new construction pattern result deprecate warn build examples users instruct use new pattern
let pool headache work even allocation reallocation thread different motivation pool headache cache allocations allocation reallocation thread optimal often people write different thread actual even loop thread modification add mascara queue fork tool lightly modify use mascara queue cache always add buffer back cache belong allocation thread result thread cache also usable give performance improvements allocation reallocation thread different performance use thread allocation reallocation noticeable worse
create encoder decoder common request responses able handle type message channel keep rtsprequestencoder rtsprequestdecoder rtspresponseencoder rtspresponsedecoder backwards compatibility extend generic encoder decoder market deprecate rename decoder test decoder generic add test case announce request receive server create test case encoder mark abstract base class rtspobjectencoder rtspobjectdecoder deprecate functionality encoder decoder add annotation headers suppress warn deprecation need whole class deprecate
add protocoldetectionresult use haproxymessagedecoder allow detect hap roxy protocol motivation sometimes useful detect byte contain hap roxy header example want write something like port unification example modifications add protocoldetectionresult use return type detect different protocol add new method allow detect proxy message result easier detect protocol
thread context interface clarifications motivation currently assume usages code event loop context methods use outside assume thread context unexpected behavior observe assumption clearly communicate enforce key areas modifications flow controller interfaces assert statements update java docs indicate assumptions result interfaces clearly indicate thread context limitations
make flow controllers write fewer fatter frame improve throughput motivation coalesce many small write larger data frame reduce frame overheads wire reduce number call httpframelisteners remote side delay write window update flush allow consume bytes return aggregate consume bytes return amount consume threshold cross modifications remote flow controller longer immediately write bytes flow control payload queue sequential data payloads merge single composite debug write write dingbats call listener add remote flow controller observe write bytes per stream local flow controller longer immediately write window update ratio threshold cross explicit call writewindowupdates trigger window update stream ratio exceed time result fewer window update send bytes return trigger writewindowupdates local flow controller follow write dingbats remote flow controller window update proceed data frame wire result better throughput write many small data chunk follow flush save bytes per coalesce frame fewer window update write flow control bytes return remote side quickly thereby improve throughput
guard race call handler handshake future sync motivation handle add callback call check deadlock handshake future produce illegals exception first report modifications pass deadlock check cox null result race illegals exception
exabyte spread channel configuration motivation current read loop facilitate read maximum amount bytes capability useful fine grain control much data invest modifications add setmaxbytesperread int getmaxbytesperread channel confirm add setmaxbytesperindividualread int getmaxbytesperindividualread channel confirm add methods recvbytebufallocator plug able scheme use control behavior read loop modify read loop transport type respect new recvbytebufallocator apr result ability control many bytes read read operation loop extensible read loop
limit header accumulate size motivation httpframelistener require httpframereader accumulate byte object currently way limit amount bytes accumulate motivation defaulthttpframereader support make oversize fail fast soon maximum size exceed defaulthttpheadersdecoder respect return value end block fail max size exceed result frame carry header data respect maximum number bytes accumulate
add acc optimization flag compile native transport motivation set optimization flag compile native transport modification add flag acc optimizations result ship optimize native code
flow controller use channel writable motivation see modifications defaulthttpremoteflowcontroller use channel writable attempt write operations flow controller methods longer take channelhandlercontext concept flow control tie connection support flow controller keep track multiple channelhandlercontext result write delay writable true flow controller interface methods clear channelhandlercontext restrictions
add generic utility queue buffer promise queue arbitrary byte range motivation simplify write code need merge slice sequence buffer promise pair chunk arbitrary size example help merge split buffer across fix size data frame boundaries modifications add new utility class coalescingbufferqueue result follow change help code switch use instead composite buffer data frame coalesce
use coalescingbufferqueue merge data write stream help instead composite debug motivation slice mutable composite debug appropriate mechanism use track release buffer write channel particular buffer pass embed local channel retain channel promise complete listen promise consolidate composite buffer break slice take composite offset indices change addition coalescingbufferqueue handle take arbitrarily size slice sequence buffer efficiently modifications convert flowcontrolleddata use coalescingbufferqueue handle merge data write result help work local channel code considerably simpler
fail address use motivation fail inetsocketaddress use construct address string modifications try lookup inetsocketaddress construct via address result work case
support conversion hot message hot content frame motivation httptohttpconnectionhandler convert full message frame support use case add httpcontentcompressor pipeline write hot message hot content additionally httptohttpconnectionhandler ignore convert send help trail headers bug spec state send modifications update httptohttpconnectionhandler support convert hot message hot content frame additionally include extra call write headers message include trail headers result one write hot message hot content help chunk pipeline convert frame trail headers exist convert send well
provide control anna resolver query add name resolver resolve relate issue motivation previously anna resolver query retry request query prevent user decide retry stop also impossible get response object whose code error name resolver operation resolve host name multiple address like address retail name modifications change relate anna resolver query make query retry move retry logic anna resolver resolve instead make query fail promise error occur fail get response add dnsnameresolverexception use query fail resolver give information failure query cache anymore change relate name resolver resolve add name resolver resolve add simple resolver resolve change relate anna resolver resolve resolve make dnsnameresolvecontext abstract anna resolver decide get single multiple address implement cache cache work resolve resolve add trace enable property enable disable trace information miscellaneous change use object til check null wherever possible add internetprotocolfamily address type remove repetitive switch case block anna resolver context raise exception decode truncate response result full control query user retrieve address via name resolver resolve cache work resolve resolve
fix data channel java doc seem extra arrow incorrectly place try link channel
make intobjecthashmap extend map motivation would useful support java interface primitive map modifications rename current methods xxx short primitive make template primitive map extend appropriate map interface result fix
correctly register pollard construct pollock channel file descriptor motivation miss register pollard events construct pollock channel exist file descriptor could cause miss connection reset modifications add events interest result connection reset detect correctly
send full response unsupported socket versions motivation send last content flush send content length modifications change sendunsupportedversionresponse send full response write flush set content length also add test method result upstream handlers able determine end response response actually get write client client able determine end response
correctly handle white space httppostmultipartrequestdecoder motivation due use cast insert white space string modifications correctly cast char result correct handle white space
correct ski manifest source jar relate motivation include ski manifest jar ski container treat correct dependencies resolve repository incorrect run time fail non descriptive classnotfoundexception result modifications include ski manifest jar include eclipse relate manifest entries jar result better ski compatibility
improve logic around acquire channel function improve motivation acquire channel function result call several time case channel poll pool queue unhealthy result fixedchannelpool call several time turn cause call result acquirechannelcount unnecessary increase example use case create fixedchannelpool instance one channel pool new fixedchannelpool handler acquire channel pool close channel return back pool acquire channel pool expect result new channel create acquire channel close discard remove pool unhealthy actual result channel remove pool ever new channel never acquire instead request acquire add pending queue fixedchannelpool acquirechannelcount increase one reason time simplechannelpool figure channel unhealthy call try acquire new channel ever request add pending queue time call acquirechannelcount already new channel would create cause maxchannelslimit modifications suggest approach modify simplechannelpool way channel detect unhealthy call private method simplechannelpool acquirehealthyfrompoolornew guarantee simplechannelpool actually either find healthy channel pool return cause promise cause case new channel fail create result calculate correctly result simplechannelpool acquire recursive override able acquire method
unhealthy channel offer back pool motivation release unhealthy channel back pool offer since acquire discard anyways also check healthiness release good idea end tons unhealthy channel pool unless become unhealthy offer modifications private simplechannelpool offer healthy method add call simplechannelpool release channel simplechannelpool offer healthy offer channel back pool channel healthy otherwise throw set failure exception promise result pool much cleaner spammed unhealthy channel add ability choose channel health validate release pass boolean flag motivation depend performance preferences individual use case sometimes would like able force health check channel release time offer back pool time would want release channel offer back pool check health try acquire channel pool see detail modifications tutu release channel channel promise boolean offerhealthyonly offerhealthyonly boolean flag allow developers choose whether channel validation offer back pool appropriate modifications make hierarchy implementations channel pool offerhealthyonly true force channel health check offer back pool offerhealthyonly false ignore channel health check try offer back pool offerhealthyonly true default result channel health check offer back pool control flag code change satisfy check style requirements motivation code need satisfy check style requirements modifications line split less character space add space add extra white space line remove result code satisfy check style requirements offerhealthyonly pass constructor parameter motivation instead pass offerhealthyonly method parameter better pass simplechannelpool fixedchannelpool constructor modifications redundant release method take offerhealthyonly remove channel pool offerhealthyonly parameter add constructor fixedchannelpool simplechannelpool result simplechannelpool fixedchannelpool take offerhealthyonly constructor parameter default behavior offerhealthyonly true code change satisfy check style requirements motivation code need satisfy check style requirements modifications line make longer character extra white space line remove result code satisfy check style requirements test need copy code exception message validate motivation need test couple code exception type validation test good enough modifications exception validation message remove simplechannelpooltest testunhealthychannelisnotoffered test result simplechannelpooltest test less couple code stack trace set empty unhealthy non offer pool motivation need stack trace unhealthy non offer pool modifications add empty stack trace static init block result unhealthy non offer pool stack trace set empty minor code factor motivation better code readability need apply several minor code factor modifications java docs true true offerhealthyonly variable name change releaseheathcheck java docs offerhealthyonly remove release channel need result code quality improve code change satisfy check style requirements motivation code need satisfy check style line make longer character result code satisfy check style requirements pull request need contain necessary change motivation pull request contain unnecessary change need part require functionality pull request modifications private void release channel final channel channel final promise private void release channel channel channel promise result pull request contain less unnecessary modifications
headers performance boost interface simplification motivation degradation performance observe branch document modifications simplify headers class hierarchy restore default headers base upon default headers make various modifications cause hot spot result performance par
fix illegals exception httpcontentencoder use continue response use motivation continue response write illegals exception produce soon user write follow response regression introduce modifications special handle continue responses add unit test result fix regression
ignore motivation keep fail machine unknown reason modifications ignore temporarily result less noise result
graceful shutdown timeout motivation stream still active graceful shutdown code wait close connection close situations event may never occur thus timeout support socket close even stream close modifications add configurable timeout graceful shutdown process attempt update unit test faster use graceful timeout result local endpoint protect local remote issue prevent channel close graceful shutdown process
defaulthttpconnectionencoder private constructors inner class motivation private constructors may result static factory methods generate construct instance class modifications make constructors public private class result access inner class constructor correct possibility synthetic method generation
replace infinite dedicate type relate motivation anna resolver use special implementation yield infinite stream server address however seem cause confusion modifications make deserve address abstract class abstract stream method return dnsserveraddressstream add dnsserveraddressstream yield server address infinitely remove deserve resolver group constructors accept single server address useful practice extract deserve address implementations top level deserve address default address return deserve address add deserve address default resist instead result less confusion explicitness
fix infinite loop handshake handler android devices motivation android devices version less lollipop harmony use use sol completion handshake handshake status handshaking instead finish also encrypt empty buffer handshake cause underflow exception produce bytes happily encrypt cause loop never break modification since bytes consume handshake process add condition break loop bytes consume handshake status handshaking result successful sol handshake android devices infinite loop
help translation errors motivation currently translate help request headers request headers correctly path scheme authority translation process respect rec help rec modifications path scheme authority must set accord rule define uris must handle define result correct translation request request
local channel event order error motivation local channel write operation occur promise associate write operation mark successful add peer queue peer actually receive data promise callback close channel race condition exist close event may occur data deliver preserve order events modifications local channel track write progress close operation happen make sure peer get pending read operations result local channel preserve order operations fix
disc channel iterate select key motivation iterate select key ignore select key know need channel implementation modifications stop iterate select key read like channel result unnecessary iteration fix
ceeecbffcacfbeebc buffer leak epollsocketchanneltest motivation introduce buffer leak epollsocketchanneltest modifications fix buffer leak result buffer leak
fix typo testequansignorecase testequalsignorecase
add support rec linux motivation protocols bop sep typically deploy top authentication protect sessions hijack tear third party facility available operate systems typically present linux modifications add new epollchanneloption write teach poll server socket channel track address key associate teach native set signature key socket result users native poll transport set signature key thus leverage rec protection top connections
add top user timeout motivation see modifications modify transport native poll allow set top user timeout result hang connections write get
optimize asci string use motivation asci string use optimize write operation modifications special handle asci string result faster write asci string
deprecation cleanup help headers motivation hot headers default headers methods deprecate due remove future release replacement method use current release deprecation policy aggressive provide non deprecate method use modifications remove deprecate annotations java docs methods best term match master apr result non deprecate methods available hot headers
hot headers iterator comment correction motivation java doc comment hot headers iterator incorrect modifications correct clarify java doc hot headers iterator result java doc hot headers iterator correct
add site code client side motivation write site client provide site code follow rec useful modification add client side code test result people want write site client reuse code
correctly store websocketserverhandshaker channel attribute motivation store websocketserverhandshaker channelhandlercontext always null close frame send websocketserverprotocolhandler use modifications store websocketserverhandshaker channel attribute make visible different handlers result correctly send close frame
defaulthttpframewriter ping payload size check motivation spec state ping frame length must otherwise error defaulthttpframereader enforce defaulthttpframewriter allow invalid frame write allow invalid ping frame write network modifications defaulthttpframewriter check frame size throw exception result fix
define use string instead char sequence motivation httpcodecutils static variables define string instead char sequence one define use header name asci string modifications change string define httpcodecutils char sequence result type consistently use char sequence add upgrade header require less work
rename motivation take throw able parameter exception also connection error ensure error methods code rename method error consistency clarity modifications rename result consistent clarify interface
update netty latest netty native motivation latest netty native fix bug determine version run time open lib also publish artifice act classifier fedora base systems modifications modify build file use fedora classifier appropriate native care take however change classifier native poll transport result netty update new shiny netty native
make stream byte assignment plug able motivation defaulthttpremoteflowcontroller become large get difficult understand maintain also desirable applications able disable priority algorithm altogether performance reason modifications abstract stream byte assignment logic rename allocation assignment clarity behind interface single implementation result way towards support
use instead address get almost motivation ubuntu address get almost return cause test fail portable modifications make change epollsockettcpmdtest make test pass ubuntu result epollsockettcpmdtest also pass ubuntu
allow add set default headers motivation prevent add set default headers prevent unexpected side effect modifications throw illegalargumentexception user try pass instance set add result surprise side effect
correctly update internal handshake state begin handshake motivation miss correctly update internal handshake state begin handshake able finish handshake directly also handle case correctly begin handshake call first handshake finish incorrectly throw error modifications correctly set internal handshake state case correctly handle begin handshake first handshake finish result correctly handle open engine begin handshake
reduce object creation unwrap wrap byte buffer use motivation often unwrap wrap use single byte buffer byte buffer reduce array creations case modifications reuse byte buffer byte buffer result less object creation less
implement session invalidate valid open engine motivation session allow invalidate session disallow resume session support open engine well modifications correctly implement session valid invalidate open engine add unit test result invalidate sol sessions support use open
defaulthttpconnectiondecoder write ping buffer motivation defaulthttpconnectiondecoder write back receive ping frame send data buffer receive data buffer also pass listener index share send listener ensure index independent two operations modifications call slice buffer send result listener access buffer appear already consume
decouple unix linux native transport motivation transport native poll design specific linux however native code extract make work unix like distributions step completely decouple first step extract code run general unix environment linux specific code base modifications move non linux specific stuff package file descriptor inherit native methods specific file descriptors netty channel poll native code specific linux result code decouple design streamline file descriptor
add unsafeheapbytebuf improve performance systems motivation allow handle heap byte efficient matter use special byte implementation use increase performance modifications add pooledunsafeheapbytebuf unpooledunsafeheapbytebuf use ready use add unsafeheapswappedbytebuf result better performance use heap buffer ready use
correctly handle byte shift system support unaligned access motivation bug implement double reverse bytes systems support unaligned access modifications correctly reverse bytes need share code unsafe implementations result data corruption systems without unaligned access
pool pool unsafedirectbytebuf copy memory directly byte buffer motivation move bytes pooledunsafedirectbytebuf unpooledunsafedirectbytebuf byte buffer temp byte buffer allocate need ice common case since byte buffer always need read write file example modifications use platform dependent copy memory avoid need temp byte buffer result temp byte buffer allocate ice
remove synchronization overhead generate name motivation change cache generate name use cache per thread remove bottleneck many event loop use name need generate modifications use fastthreadlocal store cache name result less lock thread
asci string optimize code motivation asci string code method optimize method frequently use build default headers data structure modification add platform dependent code algorithm utilize unsafe available result asci string code faster
remote flow controller incorrectly update stream state motivation correctly determine update stream state distributor add check enforce cause several test failures modifications modify simplify write logic correct bookkeeping result distributors always call valid arguments
add uniformstreambytedistributor motivation current priority algorithm yield poor per stream good put either number stream high connection window small priorities priority disable able better modifications add new uniformstreambytedistributor ignore priority entirely manage queue stream stream allocate minimum kit iteration result improve good put priority use
maven release plugin prepare release netty beta
mark deprecate motivation exception catch handle inbound exceptions mean make much sense also channeloutboundhandler move channelinboundhandler modifications add annotation result prepare cleanup apr later release
fix set bytes read byte buffer motivation method set bytes work correctly read byte buffer allow access underlie array modifications new case add byte buffer direct array must handle copy data temporary array unit test add test case result possible use read byte buffer source set bytes method
add first class little indian support byte descendants discuss add little indian accessory byte descendants correspond accessory add unsafebytebufutil heapbytebufferutil avoid call deprecate
default promise late listener notification order motivation notification order issue default promise late listener collection use order issue observe situations late listener add future return write operation possible future run read operation schedule thread even late listener add thread lead unexpected order listener write operation must complete order read operation happen notify read operation modifications late listener collection become empty treat though null check late listeners notify immediately instead execute task executor result order natural perceive order relative task executor
allow help frame writer accept arbitrarily large frame motivation encoder currently responsible chunk frame write order conform max frame size frame writer would better place since could perform reuse promise aggregate write could also perform single allocation frame headers modifications modify perform chunk modify contract interface modify send give allocate bytes writer result fix
stream prior headers send motivation flow control headers frame possible intermediate error result stream frame send frame endpoint yet aware violation spec either result sammy log endpoint break connections modifications modify handler send stream send least one headers frame remote endpoint stream result fix
allow set httpconnectionhandler motivation time user want set build httpconnectionhandler modifications allow set via builder result flexible build httpconnectionhandler possible
cleanup java docs motivation java docs say default false default currently true modifications make java docs consistent code result less confuse docs
remove register events even loop close motivation need remove register events channel even loop actual close ensure produce cup spin actual close operation delay execute outside even loop modifications register events poll socket implementations linger use result cup spin
weight fair queue byte distributor motivation prioritystreambytedistributor use homegrown algorithm distribute bytes nod priority tree prioritystreambytedistributor concept good put may result poor utilization network resources prioritystreambytedistributor also performance issue relate tree traversal approach number nod must visit also exist prove algorithms resource schedule domain prioritystreambytedistributor employ modifications introduce new byte distributor use elements weight fair queue schedulers result stream distributor sensitive priority use familiar distribution concept fix
httpconversionutil account cookie compression motivation rec allow cookie value split individual header elements get benefit compression httpconversionutil account behavior modifications modify httpconversionutil support compress decompress cookie value result httpconversionutil compatible fix
ensure leave data bio error happen motivation need ensure consume pending data bio error correctly send close notify remote peer modifications correctly force user call wrap something leave bio result close notify lose
extract socket dress logic name resolver motivation discuss name resolver design resolve socket address string name port return inetsocketaddresses resolve string name return address socket address inetsocketaddresses resolution actually different concern use bootstrap modifications extract socket address inetsocketaddresses resolution concern new class hierarchy name address resolver address resolvers delegate name resolvers result better separation concern note new address resolvers generate bite allocations intermediate promise list
throw exception kerman refractory use opensslservercontext motivation currently support use kerman refractory opensslservercontext throw exception user try least give surprise hard debug problems later modifications throw exception user try construct opensslservercontext kerman refractory result fail fast user try use something support
builder construct domain remapping motivation domain remapping add make domain remapping look like safe call add anytime never true probably better deprecate add introduce domainnamemappingbuilder modifications make immutable implementation domain remapping add builder immutable domain remapping replace regex pattern string start check replace map two array immutabledomainnamemapping deprecate mutable apr estimation string builder initial size immutabledomainnamemapping string add string til commonsuffixoflength replace unnecessary sub string creation domain remapping match region match result clients able create immutable instance domain remapping builder apr
back port socket extension handlers client server motivation socket extension support compression old master port modifications back port relevant code result socket extension support compression
allow sync mappings handler motivation sometimes user want sync mappings handler possible populate map front modifications add sync map interface make handler work result possible sync mappings ski
remove prioritystreambytedistributor motivation prioritystreambytedistributor obsolete replace weightedfairqueuebytedistributor modifications remove prioritystreambytedistributor use weightedfairqueuebytedistributor default result prioritystreambytedistributor longer maintain replace better algorithm
defaulthttpremoteflowcontroller stream writ ability notification break motivation longer reliably detect stream writ ability change occur modifications ensure writ ability reliably report fix infinite loop issue detect consolidate unit test result reliable stream writ ability change notification less infinite loop uniformstreambytedistributor fix
trivial java doc fix channelhandlercontext
surrogate support motivation uhf represent full range unicode character thus concept surrogate pair bite code units use represent miss character currently support thus incomplete modifications add support surrogate pair result support surrogate pair correctly convert uhf
stop decode decoder remove motivation need check handler remove continue decode remove safe continue operate buffer modifications check decoder remove fire message pipeline result illegal buffer access decoder remove
remove multiple call recordleaknonrefcountingoperation motivation call recordleaknonrefcountingoperation two time result incorrect leak detection report modifications remove duplicate call recordleaknonrefcountingoperation result correct leak detection result
ensure always call first method handler motivation user add channel handler outside even loop possible get situation handle add schedule even loop call another methods channel handler even loop may already execute point time modification ensure always check handle add method call already add currently need call even loop pick handle add call work handler add channel pipeline outside even loop actual handle add operation schedule even loop cleanup defaultchannelpipeline result correctly order method executions channel handler
hot connection stream generation support queue motivation streambufferingencoder provide queue max concurrent stream violate however stream generation provide return next stream expect connection account queue code provide way generate next stream give endpoint function without queue modifications change result hot connection generate next stream queue non queue scenarios fix
ensure whole certificate chain use create context client mode use motivation incorrectly add trust certain certificate chain opensslclientcontext create need correctly add key chain modifications correctly add whole key chain result sol client auth work opensslclientcontext one cert contain certificate chain
add line encoder append line separator automatically motivation see modifications add line encoder line separator result user use line encoder write string line separator automatically
always assume reference count ownership motivation current interface clear condition ownership transfer add component call well define behavior users ensure leak occur modifications always assume reference count ownership result users call independently check buffer ownership transfer independently release buffer fix
use abstractreferencecounted clean cod code cache motivation duplicate methods message type code cache clean use abstractreferencecounted modifications use abstractreferencecounted avoid duplicate methods result duplicate methods clean
motivation fix spell mistake modifications change threshold threshold result spellchecker warn disappear
add methods position independent file channel call byte motivation see modifications add methods position independent file channel call byte subclasses result user use new methods read write byte buff without update file channel position
correctly add newlines encode base motivation correctly add newlines sec data need pad regression introduce modifications correctly handle newlines add unit test prove fix result invalid base encode data
add escape string til motivation see modifications add escape string til result string til counter part escape escape
stream regression motivation commit introduce bug stream process would prevent stream send promise would mark successful even though stream frame would never send modifications fix conditional allow reset stream send stream state besides idle result stream frame send suppose send fix
promise notifier propagate cancel events motivation future promise notifier listen cancel propagate cancel promise expect notify modifications future cancel promise cancel add unarypromisenotifier collection promise necessary result promise notifier propagate cancel events promise
anna resolver make possible define additional record query motivation current anna resolver apr allow define additional record query useful many case example want query server real client address end client subset extension modifications change add new query methods list additional record query result possible create query end client subset extension example
write away channel inactive motivation httpconnectionhandler inherit bytetomessagedecoder attempt decode remain data call abstract decode method httpconnectionhandler server mode data exchange yet try treat data invalid connection preface write away noisy log create illusion protocol violation modifications channel inactive connection preface decode execute result log file include mislead error message relate connection preface errors
stream remove map ensure close call motivation interface contract say stream remove active stream map necessarily stream map channel become inactive may remove stream map call ensure close modifications remove stream map iteration ensure close call result expectations ensure close interface violate
add assert users see errors try use methods outside even loop motivation guard users use unsafe methods outside even loop design modifications add assert result easier users detect miss use
guard entrance pendingwritequeue motivation pendingwritequeue guard entrant write remove faisal run modifications remove faisal repeat queue finally empty result assert empty always hold
defaulthttpconnectionencoder data frame size incorrect error motivation error occur write operation clear coalescingbufferqueue reset queue readable bytes recover error defaulthttpremoteflowcontroller attempt return bytes flow control window since frame reset size lead invalid flow control account modifications reset size error occur result flow controller errors due set size error occur
throw exception kerman refractory use opensslclientcontext motivation currently support use kerman refractory opensslclientcontext throw exception user try least give surprise hard debug problems later modifications throw exception user try construct opensslclientcontext kerman refractory result fail fast user try use something support
ensure native memory release opensslservercontext constructor throw exception motivation need ensure check inside try catch block free native memory allocate constructor super class timely manner modifications move check inside try block result correctly release native memory depend finalize check constructors fail
trivial java doc fix fix format diagram channel future java doc update external link autobahn server fix various spell issue
add logjloggerfactory log logger motivation see modifications add logjloggerfactory log logger internal logger implementation base log result user use log directly without special self bind
use shade dependency tool instead copy paste motivation tool support non unsafe unsafe versions queue allow shade library netty common allow stay zero dependency modifications remove copy paste tool code shade library dependencies shade remove section generate pom remove usage onetime ask remove together result less code maintain easier update tool less pressure queue implementation create much garbage
fix entrance issue channelwritabilitychanged write motivation always trigger firechannelwritabilitychanged directly update pending bytes channeloutboundbuffer make within even loop problematic cause entrance issue user custom channeloutboundhandler multiple write within write method also handler intercept channelwritabilitychanged event trigger another write channel writable also easily happen user use messagetomessageencoder subclass trigger write channelwritabilitychanged beside also trigger firechannelwritabilitychanged often user write outside even loop case increase pending bytes outbound buffer schedule actual write decrease write take place may trigger firechannelwritabilitychanged event may trigger actual write end channeloutboundbuffer third gotcha user may get multiple events even writ ability channel change modification always invoke firechannelwritabilitychanged later even loop trigger firechannelwritabilitychanged channel still active writ ability channel change need cause events already trigger without real writ ability change write call outside even loop increase pending bytes outbound buffer channel writable update directly cause firechannelwritabilitychanged firechannelwritabilitychanged trigger task pick even loop usual result entrance possible write within channelwritabilitychanged method events without real writ ability change
fix one java doc issue extra motivation one extra writebufferwatermark java doc high high water mark generate java doc show content high high water mark modifications remove result generate java doc show content high water mark instead high high water mark
new channel handler allow user control flow message upstream handlers emit one event read motivation handlers httpobjectdecoder emit one event per read lead problems downstream handlers expect one event hope channel confirm set thread false prevent events send process one receive modifications new handler call flowcontrolhandler feed read thread act hold buffer auto read get turn events arrive auto read result fix issue
fcbeebfdffaecfeefeecc unit test bug motivation introduce unit test verify applicationprotocolnegotiationhandler compatible handler however server attempt alan verify complete client verify handshake complete lead client side sol engine prematurely close throw exception modifications client wait sol handshake alan complete test exit result reliable
poll set read flag limit epollinreadyrunnable motivation conditionally set read flag base upon maybemoredatatoread set possible read flag set nothing read executeepollinreadyrunnable actual data read even though user request modifications always set read flag begin read make single epollinreadyrunnable execute channel time result less chance miss read events poll transport
fix possible deadlock defaultchannelpipeline motivation user multiple event loop events group call remove replace even loop belong another channel possible deadlock even loop modification ensure actual modification take place synchronize block wait handle add handle remove method call submit task executor still hold look ensure correct order pipeline modifications ensure abstractchannelhandlercontext put link list structure handle add method call skip handle add call need ensure handle add always call first result possible deadlock modify defaultchannelpipeline
add char sequence operations byte motivation often users either need read write char sequence byte add methods byte optimizations depend implementation modifications add betcha sequence write sequence gotcha sequence reach sequence result easier read write char sequence byte
add log configuration motivation currently default log level run test debug run build server might nice avoid debug level allow level configure modifications add configuration add common module allow log level configure default level still debug result log level configure command line man test level error
allow specify custom eventexecutorchooserfactory relate motivation sometimes may beneficially user specify custom algorithm choose next modifications allow specify custom eventexecutorchoosefactory allow customize algorithm result flexible apr
make retain derive buffer recyclable relate motivation slice duplicate read slice currently create non recyclable derive buffer instance heavy load application create lot derive buffer put garbage collector pressure modifications add follow methods create non recyclable derive buffer retain slice retain duplicate readretainedslice add new recyclable derive buffer implementations reference count value add bytes folder retain duplicate add bytes folder replace byte user replace content holder consistent way delegate holder construction replace byte use retain duplicate retain slice wherever possible miscellaneous rename duplicatebytebuftest duplicatedbytebuftest miss make replayingdecoderbytebuf reject return exception instead throw callers need add dummy return statement result derive buffer recycle create via retain slice retain duplicate derive pool buffer
add code site remove addebbefefbceabf mistake
add start parameter sslcontextbuilder motivation incoherence term apr one want use start without start one use sslcontextbuilder method new handler start developer force call directly handler constructor modifications introduce start sslcontextbuilder parameter well member context thus open implementations always use information call handler constructor use false default particular deprecate constructors sol implementations client context use false default result fix generally homogenize apr everything via sslcontextbuilder
change host file resolver case insensitive motivation resolve host via etc host file case insensitive local host local host refer host apply query modifications store host map lowercase key lookup key lowercase add unit test host file parser use uppercase file entry add unit test defaulthostsfileentriesresolver resolve local host local host result host resolution local host file match rule apply detent host ping
add httpobjectencoderbenchmark motivation benchmark measure httpobjectencoder performance modifications create new benchmark httpobjectencoderbenchmark result micro benchmark httpobjectencoder
correctly increment reallocation huge call motivation call reallocation huge decrement need increment modifications replace decrement increment result correct metrics
make work ski motivation currently pack ski bundle thus work ski environment modifications netty transport native poll add configuration attach manifest jar native library netty common add configuration instruction dynamic import package maven plugin make sure native code load netty transport native poll bundle result bundle attach induce native library successful load ski environment fix
object asthma primitive iterator ape motivation index attempt move back items may displace spot hash base array take another item happen next index reference primitive iterator update time primitive entry reference incorrect index may result ape modifications index move entries back primitive iterator adjust next index result primitive iterator remove update internal state reference new next index ape fix
remove indirection motivation use channel unsafe invoker executor unnecessary indirection channel even loop modifications remove indirection use channel even loop result cleaner code
add events group register channel promise motivation need channel parameter channel promise provide get channel channel promise resolve modifications add channel promise deprecate channel channel promise result convenient people need set one parameter
allow write void promise channel channel group motivation users sometimes want use channel void promise write channel reduce pressure also possible write via channel group modifications add new write write flush overload allow signal void promise use write channel result users write void promise use channel group
correctly implement code motivation code implement work correctly instance share content modifications add implementations unit test result correctly work equal code method
ensure add last work expect embed channel motivation user use add last channel pipeline embed channel constructor run break embed channel able collect inbound message exceptions modifications ensure add last work expect move logic handle message exceptions protect methods defaultchannelpipeline use custom implementation embed channel result add last work expect use embed channel
test composite debug release components motivation order prevent regression add test case bug cause composite debug release components modifications add test case assert composite debug component buffer indeed release result abstractcompositebytebuf gain test case prevent future regressions
ensure call niece loop pending task epolleventloop pending task produce lovelock motivation singlethreadeventexecutor pending task call task queue size get number pending task queue safe use muscle queue size allow call single consumer modifications ensure size call even loop result lovelock possible call pending task matter thread
split httpmultiplexcodec frame multiple code test fix motivation quote issue httpmultiplexcodec currently two things map exist apr frame manage child channel would better two part separate would allow less couple development handlers flow control could handler instance allow applications insert stream code permit custom logic could use part implement custom frame type would also greatly ease test child channel could test without deal frame encode wire modifications split httpmultiplexcodec httpframecodec httpmultiplexcodec httpframecodec interact exist callback base apr httpmulitplexcodec completely independent simply multiplexes httpstreamframes child channel additionally help code handler introduce convenience class simply set httpframecodec httpmultiplexcodec channel pipeline remove improve test coverage quite bite result original httpmultiplexcodec split httpframecodec httpmultiplexcodec test higher confidence code
correctly catch errors bootstrap motivation correctly cache errors resolve bootstrap may notify future correctly modifications move code try catch block try fail promise result promise always notify
open engine writeplaintextdata want read data bio buffer unit test motivation unit test open engine open engine writeplaintextdata want read data bio buffer issue modifications update engine test include renegotiation result test coverage open engine
httpcontentencoder set chunk transfer encode motivation use httpcontentcompressor hot response protocol version httpcontentencoder encode set transfer encode header chunk chunk transfer encode valid help cause err content decode fail errors chrome similar failures modifications skip message result able serve well httpcontentencoder pipeline
add test verify possible add another channel initialize init channel method motivation receive report possible add another channel initialize init channel method add test case modifications add test case result validate work expect
add hot headers value motivation commons value miss hot header value constants modifications add constants content type add constants zip deflate content encode result hot header value constants available
ability run task end even loop iteration motivation change part change provide capability split change enable try ways implement modifications two methods add class add remove task execute end current next iteration order support methods add invoke task run executor pass timeout value expire add queue hold task execute end every iteration result ability execute task end even loop iteration
plug able resource leak detector allow users netty plug leak detector purpose instrumentation motivation roll large netty deployment want able track amount leak see production via custom instrumentation order achieve today plug custom bootstrap initialize custom due class mostly mark private static methods lot code copy paste quite ugly modifications add static loader method try instantiate class pass via otherwise fall back default one modify non final report break methods override result instrument leak application add something like follow
add support kerman refractory use motivation able use exist java apps use sol apr need also provide way use exist kerman refractory modification make use new native apis hook kerman refractory result use kerman refractory well
allow set max capacity task queue even executors event loop motivation restrict memory usage system sometimes need adjust number max pending task task queue modifications add new constructors modify number allow pending task add system properties configure default value result flexible configuration
share code meantime outlander idle handler motivation meantime outlander idle handler duplicate code share whatever possible modifications let meantime outlander extend idle handler result remove code duplication
change minimum version compilation motivation previously change netty always compile java otherwise source compatibility break report fix meantime modifications change minimum version compilation result easier maintain code
use constant string instead user provide file name disk upload temp file name motivation disk upload create temporary file store user upload contain user provide file name part temporary file name security problems prevent use new file use filename get name small risk bug security issue remain modifications use constant string file name rely callers use ensure unique disk file name result slight security improvement cost little obfuscate temp file name
open engine finalize motivation open engine open context currently rely finalize ensure native resources clean finalize require extra work extra work avoid user instead take responsibility release native resources modifications make base class open engine open context finalize instead implement reference count engine insert pipeline release handler add new provider use enable new feature result users opt finalize free open engine open context fix
maven release plugin prepare release netty final
fix native lib load problem ski motivation issue say throw invoke path try resolve problem modify native library load logic modifications load native lib native library load bundle class loader diff native class class loader root cause throw native method invoke load native library bundle class loader firstly embed resources fail result first error throw native method problem resolve secondly native library work normal non ski end hard load logic bundle simple try load library path end find fall back originally logic sign
add nonstickyeventexecutorgroup motivation offer defaulteventexecutorgroup eventexecutorgroup return orderedeventexecutor provide strict order event execution one limitations implementation contain default executor always tie single thread lead unbalance execution one thread may super busy others idle modifications add nonstickyeventexecutorgroup use wrap another eventexecutorgroup like unorderedthreadpooleventexecutor expose order sticky thread use give even executor basically mean thread may change execution task even executor order still guarantee result better utilization thread use case
add warn attribute remove attribute gean remove motivation use attribute remove attribute gean remove multi thread environment drawbacks make sure document modifications add java docs mark attribute remove attribute gean remove result hopefully less surprise behaviour
fix querystringdecoder path decode path info motivation currently querystringdecoder path simply return path info without decode java doc state modifications make querystringdecoder path decode path info add test querystringdecodertest result querystringdecoder path decode path info expect
findnextpositivepoweroftwo bound motivation usages findnextpositivepoweroftwo assume bound check take care method however bound check take care findnextpositivepoweroftwo instead assert statements use imply caller check bound lead unexpected non power return value caller careful thus invalidate logic depend upon power modifications add safefindnextpositivepoweroftwo method run time bound check always return power result fix
servers send duplicate intermediate certificate motivation servers sometimes send duplicate intermediate certificate modifications opensslkeymaterialmanager setae material aliases call sol setcertificatechainbio result servers longer send duplicate intermediate certificate
update netty native apr change motivation netty native apr change remove feature contribute memory leak modifications update use modify netty native apr result netty use latest netty native
message greater potential leak motivation message greater potential leak new message receive exist message complete hot content receive malcontent length exceed content length long modifications make httpobjectaggregator robust leak reduce dependence handlingoversizedmessage instead rely general check null current message result robust message greater less chance leak
fix check unssafenocleanerdirectbytebuftest motivation use incorrect assume true check modifications fix check result able run test also long int could access
httpconnectiondecoder remove local settings setter method motivation httpconnectiondecoder local settings hot settings use code help currently result duplicate code modifications remove httpconnectiondecoder local settings hot settings result smaller interface less duplicate code
switch netty native use different package name motivation previous versions netty native use name space could lead problems user try use tomcat netty app modifications use netty native use different name space adjust code apr change result possible use netty native even run together tomcat
add ability omit implicit flush call embed channel write outbound implicit firechannelreadcomplete embed channel write inbound motivation use embed channel implement proxy channel sort shovel message source destination channel latter real network channel poll may may manage channel pool could fuse end directly together embed channel provide nice disposable section channel pipeline use instrument message pass proxy portion ideal flow look like source channel read proxy write outbound destination write source channel complete proxy flush outbound destination flush destination channel read proxy write inbound source write destination channel complete proxy flush inbound source flush problem write outbound write inbound emit surplus flush firechannelreadcomplete events turn yield surplus flush call end pipeline modifications introduce new set write methods remain semantics write method flush outbound flush inbound result possible implement ideal flow fix embed channel ensure open unit test stuff
handler reference count leak pipeline replace fail motivation handler attempt generate new handler select context insert handler pipeline however underlie channel close pipeline modify operation may fail create handler may also create engine type reference count handler state insert pipeline take reference count ownership engine condition leak engine reference count modifications operation fail release engine object result fix
child chan ability open outbound local stream fix motivation child channel apr allow create local outbound stream modifications add httpstreamchannelbootstrap allow create outbound stream result child channel apr support outbound stream
prevent extra performance hit fill backtrack create new annotate connect exception motivation make easier debug connect exceptions create new exceptions also contain remote address basically create new instance call set trace pay extra penalty call fill backtrack call super constructor modifications create special sub class exceptions override fill backtrack method eliminate overhead result less overhead annotate connect exceptions
child channel frame code feature parity motivation unfortunately things add outbound flow control httpmultiplexcodec child channel apr interact outbound remote flow control stream use flow control window correspond child channel mark unsuitable writ ability change event fire similarly unsuitable child channel mark writable writ ability event fire window update frame receive change mostly contain channeloutboundbuffer abstracthttpstreamchannel httpmultiplexcodec introduce hot stream object use instead stream identifiers stream frame hot stream object allow application attach state application handler longer need maintain stream state map state remove stream state events longer necessary due introduction hot stream also stream state events find hard complex work port httpframecodec add support frame yet implement like ping settings also add httpframecodecbuilder expose options httpconnectionhandler apr else use frame code like buffer outbound stream window update ratio frame logger etc modifications child channel writ ability stream outbound flow control window interact describe motivation channel handler free ignore channel writ ability case parent channel responsible buffer write window update receive connection level flow control window ignore child channel writ ability affect stream level flow control window child channel could mark writable even though connection level flow control window zero modify httpstreamframe httpframecodec take hot stream object instead primitive integer introduce special httpchannelduplexhandler new stream foreachactivestream methods recommend user extend handler use advance feature explain documentation new inbound stream active detect check hot stream manage state httpheadersframe null outbound stream active detect add listener channel promise write first httpheadersframe stream close event listen add listener hot stream close future add simple httpframecodecbuilder implement miss frame type result httpmultiplexcodec support outbound flow control httpframecodec apr make easy user manage custom stream specific state create new outbound stream httpframecodec apr much cleaner easier work hack like channelcarryingheadersframe longer necessary httpframecodec also support ping settings frame httpframecodecbuilder allow httpframecodec use rich feature httpconnectionhandler apr
use heap buffer default use local channel locale rechannel motivation local transport use communicate jim use heap buffer modifications use heap buffer default request otherwise result allocate direct buffer default use local transport
ensure send duplicate certificate use open engine motivation need ensure set duplicate certificate use open engine modifications skip first cert chain set chain send duplicate certificate add inter opt unit test ensure duplicate send result duplicate
add optional pending timeouts counter parameter hashedwheeltimer constructor ensure pending timeouts exceed provide max pending timeouts motivation rate new timeouts create high create timeouts cancel jim crash heap space guard implementation prevent modifications constructor hashedwheeltimer take optional max pending timeouts parameter beyond reject new timeouts throw rejectedexecutionexception result change max pending timeouts parameter pass constructor argument hashedwheeltimer keep track pending timeouts yet expire cancel new timeout create check current pending timeouts equal greater provide max pending timeouts throw rejectedexecutionexception
httptohttpconnectionhandler inboundhttptohttpadapter ignore stream dependency stream weight motivation mag promise ignore header outbound message beside inboundhttptohttpadapter also add stream dependency stream weight headers modifications respect stream dependency stream weight result correctly respect stream dependency stream weight
add proxy protocol tiv support motivation current proxy protocol implementation support optional type length value field pull request add tiv value specify proxy protocol specification add support arbitrary tvs modifications exist hard message implement additional tiv read operation small bug unix reader set reader index correctly also fix result proxy protocol support tvs
increment leak checkout prevent false leak detestation first time motivation resources detector report leak first call open obj leak checkout start value increment subsequently value leak checkout always return resource leak application call resources detector open obj validate leak fail first call even though leak application modifications value derive leak return incorrect value resource leak result fix false leak report first call resources detector
fix fix defaulthostsfileentriesresolvertest pass windows motivation windows host file empty default least machine see detail reason test rely file contain entry local host modifications refactor class code normalize input host name look change test verify host name normalize case insensitive way look intent original test result test pass vanilla windows machine local host host file effect anywhere else actual netty code sign
clean unused import motivation build seem enforce pile modifications remove unused import line result less unused import sign
flush frame encoder buffer channel flush receive motivation frame encoder maintain internal buffer incoming data compress write compress data size threshold reach frame encoder override flush method thus way flush data pipeline via data close channel modifications override flush function flush demand also override allocate buffer function accurately size output buffer instead need potentially really via buffer ensure writable result implementation work describe
remove concept pending stream close future access stream active
eliminate usage release later reduce memory usage test motivation use test simplify bite release reference count object problem simplify stuff increase memory usage lot memory may free timely manner modifications deprecate release later remove usage release later test result less memory need build netty run test
let behave like state java docs motivation may consume bytes even buffer overflow buffer underflow detect correct consume bytes process without store data unwrap wrap call beside also process one record time modifications correctly detect buffer overflow buffer underflow consume bytes non detect process one record per call result open engine behave like state java docs engine
revert counter optimization round robin better implementation find
read hot headers motivation read implementation hot headers allow efficient usage memory perform ant combine construction iteration serialization modifications add new readonlyhttpheaders class result readonlyhttpheaders exist use performance reason appropriate
expose char sequence version output get retype output gotcha set motivation would flexible make gotcha set get retype code usable hot message entity char sequence improve usability general purpose code help avoid multiple fetch content type header message could external code char sequence method versions could apply modification expose output get retype output getcharsetasstring output gotcha set versions work char sequence new methods reuse old ones work hot message entity result flexible methods set good code reuse
fix test cleanup local channel motivation local channel close responsible ensure queue object release local channel close also close peer channel however unit test may wait channel complete shutdown process destroy thread exit test may mean buffer ice release report leak modifications test use local channel wait channel close exit test clean associate events group result correct usage local channel test
remove usage release later miss babe decaf
fix racy pooledbytebufallocatortests motivation test pooledbytebufallocatortests use park nos give resource enough time get destroy race may good enough modifications ensure thread cache really destroy result racy test depend thread cache
ensure try recover exception catch server channel work expect motivation many open file happen ursula loader class load ursula loader need find class anonymous inner class create enable auto read may cause problem modification create runnable schedule ensure lazy load result problems try recover
server return status header size errors motivation currently clients attempt send headers large receive frame make harder need implementations top netty handle graceful way modifications decoder throw stream error type frame size error httpconnectionhandler attempt send hot header status end stream true result implementations subclass part netty handle
use single array selectedselectionkeyset motivation selectedselectionkeyset currently use array internally users expect call flip access underlie array switch active array however concurrently use array time get away use single array careful reset elements array modifications introduce selectedselectionkeysetselector wrap selector ensure reset underlie selectedselectionkeyset data structure select loop bound niece loop processselectedkeysoptimized define precisely know real size underlie array result fix
eagerly initialize logger factory motivation applications set logger factory want logger factory one logger factory yet netty eagerly initialize trigger initialization class application chance set prefer logger factory modifications commit two key change netty attempt eagerly initialize default logger factory application layer netty already set logger factory eagerly initialize unrelated class logger factory motivation behind initialize threadlocalrandom soon possible case block read work around applications problematic set file java system security policy less secure even get start myths result netty use logger factory application prefer initialize unrelated class
fix false positives use resources detector motivation need ensure track object resource leak close call otherwise may get false positives report resources detector happen may able figure need track object anymore already queue collection actually get chance close enclose resource leak modifications add resources tracker deprecate old resource leak fix java docs correctly release buffer add unit test resources detector show resources tracker problems result false positives report resources detector use
use unbounded queue tool motivation tool provide unbounded misc link queue shade tool unbounded misc link queue use various place give public equivalent available tool time modifications use school misc link queue upper bind specify result fix
wrap operations require socket permission privilege block motivation currently netty wrap socket connect bind accept operations privilege block wrap case lookup might happen prevent application utilize security manager isolate socket permissions netty modifications introduce class socket tip wrap operations require socket permissions privilege block result user netty grant socket permissions explicitly netty jar without grant rest application
open byte buffer bio motivation currently netty utilize bio new bio pair control lifetime event notification delegate open encryption decryption current implementation set pair bio buffer read write data approach require copy data java byte buffer native memory bio buffer also require bio buffer sufficiently large hold application data direct byte buffer use avoid copy intermediate bio buffer read write directly direct byte buffer memory still need internal buffer open may generate write data result read call handshake alert renegotiation etc buffer large enough hold application data modifications take advantage new byte buffer base bio provide netty native instead use bio read bio write result less copy lower memory footprint requirement per tvs connection
call discardsomereadbytes cause decoder get corrupt modification add last index value current reader index reset reset decoder result fix
cost staple support netty use netty native motivation cost staple formally know tvs certificate status request extension alternative approach check revocation status certificate servers preemptively fetch cost response responder cache period time pass along staple tvs handshake client longer reach check validity certificate key benefit speed client crosscheck certificate efficiency internet longer dose cost responder servers safety less operational dependence certificate owners sustain short outages privacy longer track users certificate modifications result high level apr enable cost staple
default connection modify child map iterate motivation default connection remove stream iterate children add children parent stream remove process may remove elements child map iterate without use iterator remove method generally unsafe may result undefined iteration modifications use iterator remove method iterate child map result fix
create reusable array list array list field null motivation return new array list every time call defeat purpose reusable array list modification modify create array list array list field null result create reusable array list array list field null
correctly handle connect disconnect epolldatagramchannel kqueuedatagramchannel motivation correctly handle connect disconnect epolldatagramchannel kqueuedatagramchannel behavior different compare niodatagramchannel modifications correct implement connect disconnect methods share connect relate code add test result epolldatagramchannel kqueuedatagramchannel also support correctly connect disconnect methods
use mock mock motivation use various mock frameworks use one modifications make usage mock framework consistent use mock result less dependencies consistent mock usage
correct fail write notyetconnectedexception oiodatagramchannel connect yet motivation niodatagramchannel fail write notyetconnectedexception data channel yet connect byte write oiodatagramchannel well modifications make oiodatagramchannel consistent niodatagramchannel result correct consistent implementations data channel
ensure handler sslclosefuture notify case motivation handler sslclosefuture may notify channel close close notify receive modifications ensure try fail sslclosefuture channel close result correctly notify sol close future
allow configure handler wait close notify response close channel fix racy flush close notify timeout schedule motivation handler close channel soon able write close notify message may user want may make sense close actual response close notify receive order guarantee clean shutdown connection case beside closenotifyflushtimeoutmillis volatile may change two read need cache local variable ensure change int beside also need check flush promise complete schedule timeout may happen able cancel timeout yet otherwise produce mislead log message modifications add new setter getter handler allow specify behavior old behavior preserve default add unit test cache volatile closenotifytimeoutmillis correctly check flush promise complete try forcibly close channel log warn add miss java docs result clean shutdown connection possible use sol fix racy way schedule close notify flush timeouts java docs
fix possible call heap buffer motivation introduce bug produce call buffer sec contain multiple record position modification correctly set limit byte buffer fix add test case verify fix result correctly handle heap buffer well
fix rec violation send extension frame middle headers motivation rec say permit send extension frame middle header block need treat protocol error modifications receive extension frame netty call unknown frame verify header continuation exist result receive extension frame middle header block throw connection error close connection
level initialization cleanup
enable configure available processors motivation case application run container otherwise constrain number processors use jim invocation run time available processors return constrain value rather number processors available virtual machine netty use number size various resources additionally applications constrain number thread use independently number processors available system thus applications way globally configure number processors modifications rather invoke run time available processors netty rely method enable configuration jim start application commit expose new class netter time enable configuration value set default value run time available processors visible change exist applications enable configure either system property configure application startup base settings use configure application additionally introduce usage forbid apis prevent future use run time available processors creep future work enable bundle signatures clean use deprecate forbid methods result netty configure use underlie number processors rather constrain number processors
cleanup platform dependent code motivation platform dependent contain methods use things clean modifications remove unused methods cleanup result code cleanup
deprecate ignore resources detector max active parameter motivation resources detector support parameter call max active parameter use attempt limit amount object track leak give time generate error log message limit exceed assume relationship leak sample rate object lifetime object already track relationship may appear work case single leak record per object leak record live lifetime application general relationship exist original motivation provide limit case hashedwheeltimer limit number instance exist give time limit enforce circumstances hashedwheeltimer thread daemon implement outside resources detector modifications deprecate methods interact max active resourceleakdetectorfactory resources detector remove logic relate max active resources detector hashedwheeltimer implement logic impose limit warn users many instance exist give time result fix
new native transport queue motivation currently native transport support queue useful bad systems macros take advantage native feature provide feature parity linux native transport modifications make new transport native unix common module java class uni code generic unix items module build static library unix platform include dynamic libraries use uni transport native poll eventually queue make new transport native unix common test module test transport native unix common module live unix platform inherit test ensure pass add new transport native queue module use uni directly interact queue result uni support queue fix fix
precise calculate maximum record size use decrease mem usage motivation use maximum overhead encrypt packets lot need reality open could lead need memory modification use lower overhead bytes define spec open fix unit test use correct session calculate need buffer size result less memory usage
non active stream rec corrections motivation code help couple dependency tree state remainder stream state hot stream make implement constraints stream state dependency tree state diverge rec challenge example rec recommend retain dependency tree state stream transition close dependency tree state exchange stream idle practice clients may use stream ids purpose establish los class therefore retain dependency tree state important client perceive performance difficult limit total amount state retain stream state dependency tree state combine modifications remove dependency tree priority weight relate items public face hot connection hot stream apis information optional track depend flow controller implementation move dependency tree priority weight relate code default connection weightedfairqueuebytedistributor currently place care priority pull dependency tree relate code future generally useful expose implementations default connection explicitly limit number reserve stream idle stream longer create result compliant rec fix
null reference mini chunk allow quicker collect motivation pool debug miss null chunk mini field recycle recycler could lead keep object longer alive necessary may hold lot memory modifications null mini chunk recycle result possible earlier object
calculate correct count tiny small normal allocation motivation disable thread local cache allocate pool byte release buffer pool arena tiny small normal allocation count incorrect modifications calculate pool arena tiny small normal allocation one time add testallocationcounter test case result fix
connection preface user event motivation client write data connection preface peer shutdown socket depend pipeline handler may require different evaluation criteria infer code help write connection preface behalf client lead unnecessarily complexity error prone racy application code modifications introduce user event fire pipeline code help write connection preface result reliable mechanism applications use know connection preface write relate
add benchmarks engine implementations motivation provide engine implementation benchmarks compare imply modifications add benchmarks wrap unwrap handshake performance result benchmarks
open engine option wrap unwrap multiple packets per call motivation engine documentation say call wrap unwrap attempt consume one complete network packet limitation result thrash pipeline decode encode data may spread amongst multiple network packets referencecountedopensslengine also correct account overhead introduce individual sol write call multiple byte buffer pass wrap method modifications open engine handler support mode comply limitation deal single network packet per call referencecountedopensslengine correctly account overhead call sol write handler cache maxpacketbuffersize aggressively value may change handshake result open engine handler handle multiple network packet per call
use native new set verify modes modifications native make fix apr change relate set verify absorb change netty modifications use natives update apis add unit test demonstrate correct behavior result update latest native code unit test verify expect behavior
host parser allow inv inv give host motivation host parser retain first address give host name wrong allow inv inv modifications return contain inv entries inv entries introduce describe resolve address type preferences add new parameter account address type preferences change constructor take allow null value would use default change take make return add static ease convert result support host file contain inv inv pair host name
update native package name motivation native move internal package modifications update package native import result use correct package name native
improve performance encode methods motivation decode encode method use get byte set byte loop expensive bound reference count check beside also slow lot paranoid leak detection enable track access modifications pack bytes int short reduce operations byte use byte processor reduce get byte call result better performance general also run build peak handler module build time take
add bill materials project maven users motivation project may import multiple libraries use different versions netty modifications add netty box meta project contain project dependency management section result developers import box enforce specific version netty
unit test local channel leak motivation unit unit test use local channel local channel close method ensure pending items queue release may execute runnable peer even loop ensure peer queue also clean unit test close event loop group wait time unit test execute quickly close runnable even loop queue run thus items queue release modifications ensure unit test use local channel wait client server channel close close even loop result relate
trim optional white space combine headers value motivation update rec allow header value csc separate combine headers remove insertion modification combine headers account return back user part value result fix
handler benchmark engine multiple packets benchmark motivation currently benchmark include handler engine benchmarks also always include single tvs packet encode decode practice read data network may multiple tvs packets present expand benchmarks understand use case modifications engine benchmarks include wrap unwrap multiple tvs packets introduce handler benchmarks also account wrap unwrap multiple tvs packets result handler engine benchmarks comprehensive
expose bytes allocator metric general way motivation add way access use memory allocator use name good things expose consistent modifications add new bytebufallocatormetric bytebufallocatormetricprovider interface let bytes allocator implementations implement bytebufallocatormetricprovider move expose stats metric pooledbytebufallocator pooledbytebufallocatormetric mark old methods result consistent way expose metric stats bytes allocator
handler open engine miscalculation wrap destination buffer size motivation wrap operation calculate maximum size destination buffer ahead time return buffer overflow exception destination buffer big enough however composite debug wrap operation may consist multiple byte buffer incur overhead encryption currently account overhead require encryption multiple byte buffer assume overhead apply entire input size enough room write entire encrypt pack bio sol write return despite actually write content bio attempt retry write bigger buffer sol write grateful remain bytes previous operation put bio result send second half encrypt data send peer proper format peer confuse ultimately get expect data may result fatal error case sol write return way know many bytes actually consume best ensure always allocate destination buffer enough space guarantee complete write operation synchronously modifications handler allocate take account many byte buffer wrap apply encryption overhead include tvs header length overhead computation result fix
accept two ways start clear text motivation support two ways start tvs top connection upgrade prior knowledge methodology start currently help server example support start upgrade think simple dispatch peek first bytes inbound match prior knowledge preface determine handlers set pipeline modifications add cleartexthttpserverupgradehandler support start via clear text two approach update support functionality result netty example help server accept two ways start clear text fix memory leak problem update field final rename clear text clear text address comment code improvement always prefer static final private possible add unstable annotation use instead unhandled inbound handler assertion update java doc cleartexthttpserverupgradehandler rename cleartexthttpserverupgradehandler cleartexthttpserverupgradehandler remove redundant code configure pipeline nit priorknowledgehandler remove investigate conn state instead add httpupgradeevent check null constructor arguments rename httpupgradeevent priorknowledgeupgradeevent update unit test
update link motivation pull request solve problem find several link code refer project websites domain either move git hub maintain anymore modification update project link relevant project
remove unused code motivation cleanup platform dependent remove unused code modifications code cleanup result remove unused code
context support protocols motivation context sslcontextbuilder support way specify desire tvs protocols currently require user extract engine context build manually call engine untenable protocols string something critical support context level modifications sslcontextbuilder accept list protocols configure engine result context consistently set support protocols
convert field local variable possible motivation class field local modifications convert field local variable possible result clean chance young generation scalar replacement
platform dependent enforce array index scale byte explicitly motivation platform dependent make assumptions array index scale byte always case result methods make assumption undefined modifications platform dependent check class use unsafe result assumptions make optimizations platform dependent use byte explicitly enforce
settings back sequence issue motivation defaulthttpconnectiondecoder set read process settings send settings back remote peer process settings may result frame violate previous settings send remote peer remote peer apply new settings receive settings back therefore may violate settings remote peer perspective connection shutdown modifications send settings back process settings ensure peer receive settings back frame assume settings already apply result fix
update netty native final
add support conscript motivation conscript java security provider wrap open specifically bore sol possible alternative netty native explore commit enable investigate use modifications modify context creation path support conscript provider result netty support open conscript
voidchannelpromise notify exception throw motivation voidchannelpromise use user need ensure proper gate exception channel pipeline otherwise exception swallow user idea whats modifications always call try failure try success even use voidchannelpromise add unit test result fix
add explicit message prevent library load motivation docker flag mount temp volume default result unsatisfied error good security practice surprise failure seemingly innocuous flag modifications add best effort attempt detect temp file beng load execute even execution permissions set often flag set volume require numerous additional exclusions animal sniffer fig java posit permissions manipulation result fix
ski extension value encode netty use uhf motivation rec say host name ski extension encode netty decode use uhf modifications use instead uhf result fix
handler aggregation plain text data write motivation call sol write may introduce bytes overhead open engine base upon open able gather write mean wrap operation incur byte overhead commit attempt increase good put aggregate plain text chunk many small chunk write increase good put decrease amount call sol write decrease overall encryption operations modifications introduce sslhandlercoalescingbufferqueue handler aggregate chunk plain text default introduce handler strap fantasize control much data aggregate write aggregation disable set value result better good put use handler open engine
httpproxyhandler allow set headers motivation environments help connect handshake require special headers work modification update httpproxyhandler accept hot headers argument result header pass along help connect request proxy request successfully complete
add support wrap exist file descriptor use native queue transport motivation native poll transport allow wrap exist file descriptor support native queue transport modifications add constructors allow wrap exist file descriptor result feature set native transport par
add channel handler channel pipeline pipeline destroy motivation channel pipeline happily add handler close channel pipeline call handle add call handle remove modifications check pipeline destroy add handler proper gate exception result fix
issue specify field matt code
password message field type byte motivation update matt code base matt spec modification change make file subsequent change make file test case update result fix
fix test case introduce ada
call cox firechannelreadcomplete bytetomessagedecoder decode least one message motivation wasteful also confuse channel complete call even message forward next handler modifications call cox firechannelreadcomplete least one message decode add unit test result less confuse behavior fix
performance improvement httprequestencoder insert char string optimize motivation right httprequestencoder insertion slash urls like question mark effectively modification code new string builder len append fri index append slash append fri index len string replace new string builder fri insert index slash string result faster httprequestencoder additional small test attach benchmark benchmark mode cut score error units
remove content length header leniency motivation content length parse number leniency cause instead parse default value lead body silently ignore request incredibly dangerous instead content length header invalid exception throw upstream handle modifications commit remove leniency parse content length header allow number format exception throw escape method rather fall back default value result invalid content length header silently ignore
duplicate simplify code httppostmultipartrequestdecoder motivation contain two pair methods methods use detect last data chunk exception handle expensive methods greatly simplify methods unnecessary catch modifications remove duplicate methods replace handle return boolean result simplify code result code cleaner easier support less exception handle logic
deploy transport native unix common test motivation able easily build one native sub modules need dependencies fetch maven moment deploy transport native unix common attempt build example native poll transport fail error fail execute goal project netty transport native poll could resolve dependencies project netty transport native poll jar final snapshot could find artefact netty transport native unix common test jar final snapshot son type nexus snapshots help modifications deploy jar result dependencies maven repository
optimizations querystringencoder motivation life cycle querystringencoder simple create append paras convert string current realization collect paras list calculate fri string method simplify store paras list immediately append parameters modifications remove list paras remove tuple class use one common append parameters resolve method result less allocations tuples second call faster
close channel release close fixedchannelpool motivation channel return fixedchannelpool close remain active since channel acquire pool close close operation remain open even release channel back pool accessible become effect connection leak modification close release channel release back close pool result much harder create connection leak close active fixedchannelpool instance
add test ensure illegalreferencecountexception throw call release buffer motivation need ensure allow call release byte modifications add test case result prove fix
must expand buffer motivation must expand buffer enough writable space present buffer consistent set operations modifications ensure expand buffer write sequence betcha sequence add unit test result consistent correct behavior
add fri really need motivation need include start index check see modifications change result correct code
open engine protocol selection must contiguous motivation tvs support way advertise non contiguous versions client perspective client advertise max support version tvs protocol also support different combinations discrete protocols instead assume contiguous range open unexpected behavior handshake failures non contiguous protocols use even compatible set protocols cipher reason method determine minimum protocol maximum protocol enable contiguous range min protocol max protocol open modifications referencecountedopensslengine untenable protocols determine min max protocol versions enable contiguous range result open engine consistent sslengineimpl unexpected handshake failures due protocol selection quirk
use array initialize expression motivation code introduce clean use array initialize expressions modifications use array initialize expressions result cleaner code
filter user provide cipher use rec cipher name motivation previously filter thersites pass open format cipher name commit introduce regression swap format except user provide cipher convert remain open format mismatch would cause user provide throw away lead failure try set zero cipher exception thread main fail set cipher suite cause unable configure permit sol cipher error sol routines open internal cipher match method modifications remove reformatting user provide cipher already format result regression internals stay sane use format
fix flaky multiparty test introduce dabeebbddcdcfc motivation introduce two new test take account multiparty delimiter bytes long modifications take multiparty delimiter length account result fix
fix potential ape
unify queue poll wait timeout approach motivation kqueueeventloop epolleventloop implement different approach apply timeout respective poll call poll attempt ensure desire timeout satisfy java layer uni layer sufficient account spurious backups uni layer poll timeout granularity also limit milliseconds may large latency sensitive applications modifications make epolleventloop wait method look like kqueueeventloop poll support finer timeout granularity via timer create hide detail behind poll wait uni call avoid cross additional uni boundaries result consistent timeout approach queue poll
queue detect peer close without evil read motivation poll transport use pollard detect peer close write side socket currently queue able mimic behavior way detect peer close read may always appropriate read back pressure reason application level modifications support evil sock filter provide notification peer close socket result queue transport consistent behavior poll transport detect peer closure
include detail unsafe available motivation try find use unsafe unavailable try log continue however always east enable log chain exceptions together much easier reach original exception relevant unsafe need modifications make log could load trace level log make remember unsafe available expose unavailability cause higher level use make poll queue include reason fail result easier debug hard reconfigure environments
load native transport run architecture match compile library architecture motivation try load native artefacts architecture currently run one native libraries compile modifications include architecture native lib name append current arch try load fail arch compile arch result fix
make unpooleddirectbytebuf unpooledheapbytebuf unpooledunsafedirectbytebuf constructors public motivation constructors protect atm class public make constructors public well make easier write bytes allocator modifications change constructors public add java docs result easier create bytes allocator
extract self method avoid many unchecked motivation many unchecked code purpose want return unchecked public method return modification add method self reuse return line unchecked private self return result one unchecked leave code
correctly filter native native lib motivation change use native lib name miss also adjust filter modifications fix filter look result include native native lib expect
motivation resource leak detector old try helpfully indicate object last access report access case object clean handle lightly use object well drop last access configure tough split highly share access object lightly access object modification number change relative order importance apr functionality change max record max sample record target record number record try retain expose record sample base number already store record likelihood record new sample number currently store elements record store concurrent stack structure rather list avoid head tail since stack read need maintain head tail pointers properties imply first last access always record decide sample top element replace rather push sample happen first last access chance record previously final keep sample longer deterministic previously deterministic access pattern mean could conceivably always miss access point sample linear ramp low value exponentially back roughly equal mean access actually keep elegant proof large fit commit message code change lock sample rarely need write almost contention drop record counter slightly contentious could remove change long adder memory concern stack trace exclusion outside old class opt remove methods stack trace exclusion faster since use often get pointer compare due intern previously use contain leak print output fairly differently try preserve much original format possible things make sense keep result useful leak report faster
add stable module name follow reverse style automatic module name entry provide stable module name netty use modular applications info netty migrate future entry replace actual module info descriptor modification pom configure put correct module name manifest result fix
set read end false detect issue read motivation need set read end false detect issue read otherwise may register selector poll queue keep receive makeups important bite may even get wake read event still able read bytes socket need careful clear read end happen generally use edge trigger mode native transport nature edge trigger may schedule read event find nothing leave read atm completely drain socket previous read modifications set read end false detect result fix
ensure set get traffic class inv system work use native transport motivation try set inv opt inv system fail set get traffic opt result test error try compile netty inv systems modifications use correct opt depend system inv result able build use inv systems
disable httpobjectdecoder upgrade tvs change allow upgrade plain help connection tvs accord rec switch transport layer tvs possible without remove httpclientcodec pipeline layer protocol remain untouched switch httpclientcodec state must retain proper handle remainder response message per rec requirement point tvs handshake complete successfully server must continue response original request commit upgrade establish simply insert handler front pipeline receive switch protocols response exactly describe islander documentation modifications set httpobjectdecoder upgrade state switch protocols response contain protocol stack describe upgrade header skip pair comparison switch protocols similar continue since final response original request final response expect tvs handshake fix
open engine support unwrap plain text greater avoid infinite loop motivation handler set jdkcompatibilitymode false referencecountedopensslengine set jdkcompatibilitymode true chance get stick infinite loop peer send tvs packet length greater maximum length allow tvs rec however legacy implementations actually send larger tvs payloads open sslsessionimpl case referencecountedopensslengine return buffer overflow attempt notify larger buffer use buffer already max size process repeat indefinitely modifications support tvs payload size greater referencecountedopensslengine referencecountedopensslengine throw exception buffer overflow impossible rectify result infinite loop referencecountedopensslengine due buffer overflow large tvs payload lengths
handler derive jdkcompatibilitymode engine motivation engine implementations referencecountedopensslcontext support unwrap wrap multiple packets time handler behave differently engine support feature currently require constructor argument engine creation handler coordinate difficult require package private access extend handler modifications handler inspect engine see support jdkcompatibilitymode instead rely get extra constructor argument maybe synch engine result easier override handler consistent jdkcompatibilitymode engine handler
readonlyhttpheaders motivation use case create headers need modify read variant hot headers would useful may able provide better iteration performance encode modifications introduce readonlyhttpheaders back flat array result readonlyhttpheaders exist non modifiable hot headers use case
revert set read end false ever read revert commit introduce regression edge trigger mode use true native transport default include possible set read end false mistake even would interest read
keep leak record target amount motivation look leak nice able request least number leak modification make leak record target amount record enable back enable record elements previously shift amount make impossible result ability record access
use parametrized run handler test different providers motivation moment use loop run handler test different providers error prone also make difficult understand provider fail modifications move unit test run multiple providers extra class use unit parametrized run different provider combinations result easier understand provider produce test failures
move initialization inner class motivation output class initialize hot headers empty headers null lead ape code rely field non null one example method modifications move private static final inner class empty headers call instance initialize add test run isolation validate fix issue result initialization order output empty headers hot headers result initialize correctly
constants calculation compile time motivation allow compute calculation constants compiler could similar fix open modifications use parentheses simplify static initialization array result less byte code possible faster calculations run time
fix fail spec test relate pseudo headers validation motivation accord spec pseudo header field must appear header block regular header field request response contain pseudo header field appear header block regular header field must treat malformed section pseudo header field valid context define pseudo header field define request must appear responses pseudo header field define responses must appear request pseudo header field must appear trailers endpoints must treat request response contain undefined invalid pseudo header field malformed section clients must accept malformed response note requirements intend protect several type common attack help deliberately strict permissive expose implementations vulnerabilities modifications introduce validation pack decoder result request unknown pseudo field headers reject request contain response specific pseudo headers reject request pseudo header appear regular header reject spec pass
replace finalize usage object cleaner usage motivation recently introduce object cleaner use ensure cleanup action object become wearable reachable use reduce overhead use finalize cause process two time modifications replace finalize usage object cleaner result fix
use bad host test motivation moment use bad host port know time may change future better use specify documentation modifications replace test depend bad host result future proof code
fail fast defaultchannelpromise construct null channel motivation fail fast defaultchannelpromise construct null channel otherwise fail ape call set success set failure modifications add null check test result fail fast
use fastthreadlocal codecoutputlist motivation use recycler codecoutputlist optimize use case access thread time modifications use fastthreadlocal codecoutputlist add benchmark result less overhead cod
add java doc implement methods cancel boolean mayinterruptifrunning motivation methods implement cancel boolean mayinterruptifrunning actually ignore para need add comment para modifications add comment para result people call method clear effect para
default cache expire record per host name one tel reach motivation moment default cache expire record depend tel may result unexpected result end user especially user example use inv prefer cache data record higher tel record record remove case would return data record even try refresh modifications always expire record host name one tel reach result fix
add remove exist method defaultchannelpipeline motivation sometimes convenient remove handler pipeline without throw exception case handler exist pipeline modification add overload methods defaultchannelpipeline add channel handler due back compatibility result fix
detect android check property rather class path motivation java binaries include android class class path even actually android true longer work disable poll functionality sample case binaries use job library modifications check instead class path numerous google internal android libraries binaries check property rather class path believe safe work bother art david ems safe rob electric job result unusually build java server binaries still use netty poll
poll deadlock motivation recently introduce change behavior write account provide limit many write operations attempt per flush operation however write quantum meet selector write flag clear channel unsafe flush method optimization prematurely exit write flag set may lead write progress make follow scenario flush call socket accept data set write flag selector wake socket writable write data use write account quantum schedule flush even loop execute later however flush optimization prematurely exit write flag still set scenario socket still writable even loop may never notify socket writable therefore may never attempt flush data modifications write account quantum exceed clear selector write flag result fix
limit number bytes use copy content direct buffer output stream motivation currently copy direct byte copy fully heap write output stream result huge memory usage heap modification copy byte content via buffer output stream result fix
add anna resolver resolve question add anna resolver resolve question motivation user currently expect use anna resolver query want look full record rather address however query perform single query handle etc host file redirection name multiple name servers result user duplicate logic dnsnameresolvercontext modifications refactor dnsnameresolvercontext send query arbitrary record type rename dnsnameresolvercontext dnsresolvecontext add dnsaddressresolvecontext extend dnsresolvecontext lookup add dnsrecordresolvecontext extend dnsresolvecontext arbitrary lookup add dnsnameresolvercontext resolve question variants change dnsnameresolvercontext resolve delegate resolve request resolve simplicity move code decode record content dnsaddressdecoder result fix user duplicate dnsnameresolvercontext code implement usual resolver behavior
extract common part statements motivation statements contain common part extract modifications extract common part statements result less code byte code code simpler clear
big delay fail motivation use huge delay call schedule may cause selector error call select later guard big value modifications add guard huge value add test result fix
update data packet recipient return actual destination motivation data packet recipient return actual destination app bind modification recvorigdstaddr option enable sockets allow retrieval ancillary information contain original recipient rec function modify recvorigdstaddr set reeve use instead rec enable retrieval original recipient datagramsocketaddress also contain local address represent recipient epolldatagramchannel update return retrieve recipient address instead address channel bind result fix
fix illegalreferencecountexception use httpmultiplexcodec defaulthttpgoawayframe non empty byte buffer receive motivation incorrectly call frame release onhttpgoawayframe could lead illegalreferencecountexceptions call release inappropriate fire channel onto frame handle modifications call frame release add unit test result fix
add null check httframecodec consume bytes motivation stream register assume existence stream map modifications add null check case stream register result fix
add test validate engine zero sec buffer wrap motivation bug report claim sec buffer use open engine zero modifications add test case ensure correct behaviour result test case
correctly clear error stack case use referencecountedopensslengine motivation miss correctly clear error stack one case use referencecountedopensslengine possible pick error unrelated operation modifications correctly clear stack add verification empty error stack test result possible observe unrelated errors
correctly detect protocol enable use netty native motivation sometimes correctly detect protocol enable use netty native take account option flag example bore sol sale modifications correctly take option flag account add unit test result fix
verify error stack empty operation use referencecountedopensslengine motivation prove easy correctly clear error stack sometimes carefully test modifications add new engine wrapper use test verify error stack empty method call result better test
calculate max direct memory twice platform dependent motivation sure trivial change like interest notice platform dependent maxine memory method call twice unnecessarily static initialization default path least modifications use constant max direct memory already set value instead call maxine memory result surely perceivable reduction operations perform startup
use bytes allocator use referencecountedopensslengine build key material motivation build key material use bytes allocator use referencecountedopensslengine possible modifications whenever access referencecountedopensslengine use allocator result use correct allocator
fix grammar java doc sign
reorder channel state change httpmultiplexcodec child channel motivation write fail httpmultiplexchannel stream channel channel may forcibly close promise fail mean continuations attach promise may see channel inconsistent state still open active modifications move satisfaction promise channel cleanup logic run result listeners attach future result fail write see stream channel correct state
away connection state update sequence motivation hot connection state update defaulthttpconnectiondecoder frame listener notify away frame listener send frame synchronously mean connection state know away receive may send frame allow connection may also mean stream object create may never get take stream map unless event occur timeout modifications hot connection state update listener notify away hot connection state modification validation self contain process away instead partially decoder result create stream send frame away send receive
add opensslxkeymanagerfactory make even easier people add opensslxkeymanagerfactory make even easier people get maximum performance use open lib esse bore sol netty motivation make even easier people get maximum performance use native sol provide kerman refractory implementation people use configure key material modifications add opensslxkeymanagerfactory users use maximum performance native sol refactor internal code use logic duplicate result easier get max performance native sol implementation
leak detection combine composite buffer result incorrectly handle write index call motivation need add special handle wrappedcompositebytebuf also extend abstractly otherwise correctly adjust read write index process modifications add instance check wrappedcompositebytebuf well add test case result fix
child channel read cycle respect recvbytebufallocator motivation httpmultiplexcodec queue data internally data deliver parent channel child channel request data parent channel notify stream closure possible data queue discard close channel httpmultiplexcodec interact recvbytebufallocator control child channel demand read however currently ever read maximum one time per loop thrash read loop bloat call stack auto read channel complete enter read loop synchronously also neglect deliver data parent read loop active also mean readpendingqueue utilize originally intend extend child channel read loop parent channel read loop demand data still exist modifications modify child channel read loop respect recvbytebufallocator append parent readpendingqueue appropriate stream closure notification behave like poll queue transport read queue data data already queue memory know data also replenish connection flow control window may otherwise constrain close stream result correct read loop less risk drop data
composite debug buffer always allow buffer int int composite debug create sub array buffer components range concatenate components range single bigger buffer however call buffer return one sub buffer copy newly allocate buffer merge reason motivation profile spark show lot time spend put method inside buffer usually copy data require modification change skip last step return duplicate single buffer return call buffer implementation copy data result copy source buffer
set ski server name open engine create client mode motivation use sol provider client mode ski host name call server name sslengineimpl set peer host available use initialize sol engine allow one call engine get parameters inspect ski name send open provider well currently even though ski name send open provider handshake peer host specify miss parameters modification set soho state field ski use also verify peer actually host name set ski name consistent sol provider behavior result engine use open provider create client mode peer host initialize soho state peer host call engine get parameters reserve name return list contain name
allow load private key via open engine motivation open abstraction allow customize things example possible load private key engine support modifications add two new static methods opensslxkeymanagerfactory allow create opensslxkeymanagerfactory load private key via open engine directly result flexible usage open possible
unit test ensure cipher suit break disappear release motivation ensure class cipher suit continue work release add check cause test expand suit modifications add unit test check presence cipher suite result prevent happen future
allow use native transport present allow use native transport present system motivation able use native transport poll queue even present system especially important java release soon allow access default modifications correctly disable usage unsafe use run build correctly increment metric unpooleddirectbytebuf allocate uncover unsafe usage fix implement fallbacks native transport code present result fix
ensure key manager methods call correct time use server side support methods extend session motivation server side call key manager methods handshake call first time quite correct may receive full sol hello handshake could extra example ski host name request open expose sol cox set cert function allow set callback execute correct moment use also allow support methods extend session easily modifications make use new methods expose netty native since ensure select key material correct time implement methods extendedopensslsession add unit test ensure able retrieve various things server side key manager verify call correct time simplify code use new netty native methods result correct implementation server side usage complete implement extend session
notify help error handler closest local headers write failure motivation write headers end stream application expect stream close afterwards however write fail locally due pack encoder similar happen need make sure issue stream otherwise stream close locally orphan remotely stream typically handle send stream stream still exist locally two possible flow trailers one handle immediately one flow controller previously behave differently immediate code call error handler close stream immediate code also use listener call closest local flow control code immediately write two code paths also differ voidchannelpromise handle break immediate code path call avoid end stream however could always potentially add listener via notifylifecyclemanageronerror flow control code path unvoiced incorrectly change promise completion behavior also pass wrong promise closest local flowcontrolledbase modifications move closest local handle call error primary change call closest local immediately instead future complete likely correct behavior match data frame fix voidchannelpromise handle result see state remote issue stream properly clean stream
add support motivation support include java also support open support possible modifications add support use either implementation native implementation provide netty native compile open adjust unit test semantics provide correctly handle custom provider implementations support result able use netty
allow use netty native withe java versions prior motivation moment possible use netty native java use possible even java modification add workaround able use also use java version prior java default xextendedtrustmanager use result able use also past versions java
correctly slice content motivation correctly slice content produce incorrect representation data modifications rewrite implementation fix bug also improve reduce add unit test result fix
streamline composite debug internals motivation composite debug powerful versatile abstraction allow manipulation large data without copy bytes still non negligible cost read write however relative singular byte bus mostly eliminate rework internals use case message modification transformation zero copy prove example replace string within large message one different length modifications longer slice add buffer unwrap add slice components store target offset relative position composite less allocations object footprint pointer indirection offset arithmetic use component rather avoid pointer indirection duplicate bound check efficient back array growth facilitate optimization bulk insert insert byte bus behind instead avoid unnecessary cast method call indirection via superclass eliminate duplicate range ref check via non check versions component index find component add simple fast path component index add racy cache last access component find component int override format byte foreachbytedesc methods make use recyclable playlist buffer int int line fastercompositebytebuf imply modify add components boolean int miserable use miserable directly rather copy array first possibly array list optimize add components boolean int byte int perform repeat array insertions avoid second loop offset update simplify logic various place particular general pattern use sub range iterate add benchmarks demonstrate improvements refactoring also come across couple clear bug fix change open another unit test fix current version result much faster creation manipulation access many fewer allocations smaller footprint benchmark result follow
defer stream transition state initial write headers write motivation defaulthttpconnectionencoder write initial headers new locally create stream create stream half close state end stream flag set signal life cycle manager headers send however synchronously fail write headers life cycle manager send stream behalf connection level protocol error peer see stream idle state modification open stream half close state end stream flag set let life cycle manager take care result cleaner state management defaulthttpconnectionencoder fix
cleanup handler handshake renegotiation motivation code initiate tvs handshake renegotiation process currently difficult reason modifications commit introduce clear paths start handshake first path normal handshake handshake start timeout schedule second path renegotiation first handshake incomplete renegotiation promise add listener handshake promise otherwise renegotiation promise replace original promise point handshake start timeout schedule result cleaner easier understand code
correctly convert open bore sol java cipher name use motivation correctly convert open bore sol java cipher use different effect either use open bore sol use open always return sol null null null cipher name use bore sol always return incorrect construct cipher name match define java modifications add correct mappings cipher converter open bore sol add unit test cipher reconvert add unit engine check return sol null null null ever server client return cipher name result fix
harden ref count concurrency semantics motivation highlight race condition introduce prior optimistic update optimization know time consider acceptable give per benefit high contention scenarios propose modify approach provide roughly half gain stronger concurrency semantics race condition still exist scope narrow much less likely case release coincide retain overflow even case certain guarantee still assure release return true subsequent release retain guarantee throw particular reallocate call modifications use even number internally include live recount final release change odd number equivalent recount retain still use faster gean add release use loop first attempt use non volatile read thread yield fail provide net gain result though completely robust concurrency semantics ref count increase latency high contention still roughly twice fast original logic bench result follow
add support white space resource path test motivation windows project path contain white space resources access test fail modifications add netty common test use access resource result able build netty path contain white space
cleanup test httpframecodec httpmultiplexcodec motivation httpframecodectest httpmultiplexcodectest quite fragile often whole pipeline make test sometimes hard error prone modification refactor test data flow whole pipeline make test robust test implementation result easier write test cod future robust test general beside also fix
fix unexpected illegalreferencecountexception decode multiparty request motivation help post request may encode without file consist mix attribute modifications double release attribute add unit test result code throw illegalreferencecountexception
revert support socket status code revert commit
use motivation utility method check arguments use modification use instead statement result use utility method
reduce produce native data channel implementations connect mode motivation native code epolldatagramchannel kqueuedatagramchannel create datagramsocketaddress object receive data ram even connect mode use rec reeve method create quite heavy term allocations internally char string address inetaddressholder inetsocketaddressholder address byte object get generate construct object connect mode use regular read call need allocate modifications connect mode use read rec read reduce allocations possible adjust test ensure read work expect connect mode result less allocations use native data ram channel connect mode fix
support use executor offload block long run task motivation engine provide way signal caller may need execute block long run task offload executor ensure thread block currently handle handler really optimal offload executor still block thread modifications correctly support offload task executor suspend process sol thread add new methods context specify executor create handler remove annotations handler constructor take executor adjust test also run executor ensure work expect result able offload long run task executor use handler partly fix
introduce motivation systems depend netty may benefit telemetry alternative even loop schedule algorithms know number channel assign even loop modification expose number channel register even loop via result fix
add multi cast caveats get interface getnetworkinterface block loop back mode disable operations motivation provide multi cast support high load multi cast users use high load telecoms app day job modification add support source specific source multi cast poll transport caveats support disable loop back mode retrieval interface block operation tend less frequently use result provide poll transport multi cast common use case author
add multi cast caveats inv get interface get network interface block loop back mode disable operations motivation provide multi cast support high load multi cast users use high load telecoms app day job modification add support inv source specific source multi cast poll transport caveats beyond inv support initially bite work add join leave group specifically around sam inv use different data structure support disable loop back mode retrieval interface block operation tend less frequently use result provide poll transport multi cast inv common use case understand prefer hold inv include sure able get
default headers value iterator support removal motivation iterate value often desirable able remove individual entries exist mechanism involve removal entries conditional insertion heavy weight order remove single value modifications default headers value iterator support removal result possible remove entries iterate value default headers
invoke channel acquire callback first time channel acquire motivation simplechannelpool provide ability provide custom callbacks handlers major events channel acquire channel create channel release current implementation request acquire channel make first time internal channel pool create channel lazily trigger channel create callback invoke channel acquire callback contrary caller expectations assume channel acquire invoke end every successful acquire call also lead inconsistent apr experience acquire callback sometimes invoke sometimes depend whether internal mechanism create new channel use exist one modifications invoke acquire callback consistently even create new channel modify test support behaviour result consistent experience caller acquire apr every time call apr acquire callback invoke
kqueueeventloop epolleventloop may incorrectly update registration reuse motivation current kqueueeventloop implementation process concurrent domain socket channel order actual happen since registration relate event loop task schedule domain socket close file descriptor might reuse quickly therefore trigger new channel registration use descriptor consequently kqueueeventloop add abstractkqueuechannel method overwrite current inactive channel descriptor delay kqueueeventloop remove abstractkqueuechannel remove active channel replace inactive one active channel register events file descriptor process anymore channel never close problem also happen epolleventloop beside also may never remove abstract channel internal map unregistered prevent modifications change logic native queue poll implementations ensure correctly handle case reuse try update event poll channel still open otherwise handle queue poll correctly remove abstract channel internal map case make implementation close consistent poll kqueueeventloop result queue poll native transport correctly handle reuse author
kqueueeventloop register active channel reuse file descriptor motivation current kqueueeventloop implementation process concurrent domain socket channel order actual happen since registration relate event loop task schedule domain socket close file descriptor might reuse quickly therefore trigger new channel registration use descriptor consequently kqueueeventloop add abstractkqueuechannel method overwrite current inactive channel descriptor delay kqueueeventloop remove abstractkqueuechannel remove active channel replace inactive one active channel register events file descriptor process anymore channel never close modifications change logic kqueueeventloop remove abstractkqueuechannel channel check channel equality prior removal result kqueueeventloop remove anymore active channel reuse file descriptor
support handshake timeout socket handlers motivation support handshake timeout option socket handlers make sense limit time need move state upgrade sockets modification add option schedule timeout task task trigger user event handshake time result fix issue
properly denounce makeups motivation wake logic epolleventloop overly complex modification simplify race wake loop let event loop wake already awake make event loop check task prepare sleep small window non even loop writers issue events write okay result cleaner wake logic benchmarks
delete content mime header field exception delete content mime header field exception motivation rec content header field media type support mime header field part content type content disposition limit circumstances content transfer encode header field must include must ignore modification ignore content type result content header field ignore exception
make sync close fixedchannelpool truly synchronous motivation current implementation synchronous close method fixedchannelpool return schedule channel close via single thread executor asynchronously close channel require event loop group however might scenario application close event loop group sync close complete scenario exception throw event loop reject execution single thread executor try close channel modifications complete close function channel close introduce close sync method case current exist behaviour desire result close function would completely channel close
socket close without error protocol violations motivation incorrect sockets closure affect production system enforce close socket protocol violation prevent custom termination sequence execution huge number parameters nightmare usage support decoders configuration modification fix violations handle send proper response cod fix message leak introduce decoder option disable default behavior send close frame protocol violations encapsulate socket response cod websocketclosestatus encapsulate decoder configuration separate class websocketdecoderconfig result fix
split multiplexing frame decode allow easier customization frame process better separation responsibilities motivation past follow class hierarchy httpconnectionhandler httpframecodec httpmultiplexcodec hierarchy make impossible plug code would like act hot frame httpstreamframe quite useful various situations like metrics log etc beside also make implementation hack allow easier maintenance also allow flexible customizations split httpmultiplexcodec httpframecode modifications introduce httpmultiplexhandler replacement httpmultiplexcodec use together httpframecodec mark httpmultiplexcodecbuilder httpmultiplexcodec deprecate people use httpframecodecbuilder httpframecodec together httpmultiplexhandlder future adjust add test adjust examples result flexible usage possible less hack couple implementation help multiplexing
add test use amazon correct cry provider netty motivation amazon lately release amazon correct cry provider include test suite modifications add test relate amazon correct cry provider result test netty amazon correct cry provider
allow build power motivation moment possible build netty power systems modifications improve detection possibility use conscript skip test suite shade platform build native atm include classifier native dependency platform build native atm better detect udo test run result fix
close events race closely track poll edge motivation another iteration modifications instead maintain count write perform use read shutdown ensure account set flag write reset correspond event return poll wait require write still pending reset wake continue block write wake method result race condition eliminate fix author
fix indexoutofboundsexception incorrect value motivation httppostrequestdecoder splitheadercontenttype throw stringindexoutofboundsexception parse content type header start semicolon skip execution incorrect multiparty form data modification avoid invocation httppostrequestdecoder splitheadercontenttype incorrect multiparty form data content type result fix
validate pseudo conditional headers motivation netty implementation compliant spec commit improve compliance regard headers validation particular pseudo headers connection ones accord spec request must include exactly one valid value method scheme path pseudo header field unless connect request section help request omit mandatory pseudo header field malformed section modifications introduce httpheadersvalidator class capable validate headers invoke validation defaulthttpconnectiondecoder header read modify test use valid headers require modify httpconversionutil headers add scheme path header connect method order conform spec result initial request without method path scheme fail initial request multiple value method path scheme fail initial request empty path fail request connection specific header field fail request header different trailers fail fix test spec fix test spec
asynchronously close pool abstractchannelpoolmap motivation certain scenarios multiple concurrent abstractchannelpoolmap operations might call event loop handle also channel pool close operations map use synchronous close could end block event loop multiple thread wait deadlock might occur modifications previously introduce close sync operation fixedchannelpool extend simplechannelpool class abstractchannelpoolmap use close sync operations close redundant remove simplechannelpool instance result abstractchannelpoolmap get remove operations wait pool close happen asynchronously avoid situations could cause event loop block deadlocks
replace synchronize concurrent map httpstreamchannelbootstrap motivation replace synchronize concurrent map bootstrap class miss help variant modifications use concurrent map simplify code bootstrap class result less contention
uniform null pointer check motivation uniform null pointer check modifications use result less code result
synchronously close pool close abstractchannelpoolmap motivation get remove close methods implementation change avoid deadlocks event loop change involve modify methods close manage channel pool asynchronously return immediately behavior might fine get remove change user expect close method return close might still resources open modifications change follow preserve synchronous behavior abstractchannelpoolmap close method result abstractchannelpoolmap close return manage pool close
fix event loop hang handler motivation bug introduce look likely cause handler enter infinite loop sol record receive sol major version byte something tvs modifications follow default path intend major version abstract handler decode add unit test reproduce hang result fix
sol block hound work box default sol provider motivation default sol provider internally use block operations modifications add allowblockingcallsinside configuration handler rural delegate function result block hound instal sol work box default sol provider author
help multiparty decode chinese char work motivation receive upload postman filename contain chinese invalid char ensure remove try decode modification ensure invalid character remove result fix author
